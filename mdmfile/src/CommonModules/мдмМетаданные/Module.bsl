
#Область ПрограммныйИнтерфейс

Функция ВерсияМетаданных() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("мдмВерсияМетаданных");
	
КонецФункции	

Функция МетаданныеОбъекта(СхемаДанных) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СхемаДанных", СхемаДанных);
	Результат.Вставить("ИмяХранилищаДанных", ИмяХранилищаДанных(СхемаДанных));
	Результат.Вставить("ТипХранилища", СхемаДанных.Хранилище);
	Результат.Вставить("РеквизитПредставления", СхемаДанных.РеквизитПредставления);
	Результат.Вставить("Реквизиты", Новый Соответствие);
	Результат.Вставить("ТабличныеЧасти", Новый Соответствие); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Реквизит,
		|	Реквизиты.Тип КАК РеквизитТип,
		|	Реквизиты.Имя КАК РеквизитИмя,
		|	Реквизиты.Синоним КАК РеквизитСиноним,
		|	Реквизиты.ТипПредставление КАК РеквизитТипПредставление,
		|	Реквизиты.ПроверятьЗаполнение КАК РеквизитПроверятьЗаполнение,
		|	Реквизиты.ЗначениеЗаполнения КАК РеквизитЗначениеЗаполнения
		|ИЗ
		|	Справочник.мдмРеквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Владелец = &Владелец
		|	И Реквизиты.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличныеЧасти.Ссылка КАК ТабличнаяЧасть,
		|	ТабличныеЧасти.Имя КАК ТабличнаяЧастьИмя,
		|	ТабличныеЧасти.Синоним КАК ТабличнаяЧастьСиноним,
		|	Реквизиты.Ссылка КАК Реквизит,
		|	Реквизиты.Тип КАК РеквизитТип,
		|	Реквизиты.Имя КАК РеквизитИмя,
		|	Реквизиты.Синоним КАК РеквизитСиноним,
		|	Реквизиты.ТипПредставление КАК РеквизитТипПредставление,
		|	Реквизиты.ПроверятьЗаполнение КАК РеквизитПроверятьЗаполнение
		|ИЗ
		|	Справочник.мдмРеквизиты КАК Реквизиты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.мдмТабличныеЧасти КАК ТабличныеЧасти
		|		ПО Реквизиты.Владелец = ТабличныеЧасти.Ссылка
		|ГДЕ
		|	ТабличныеЧасти.Владелец = &Владелец
		|	И ТабличныеЧасти.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧасть,
		|	Реквизит";
	
	Запрос.УстановитьПараметр("Владелец", СхемаДанных);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Шапка.
	Реквизиты = Результат.Реквизиты;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() цикл
		
		Реквизиты.Вставить(Выборка.Реквизит, 
			Новый Структура("Имя, Тип, Синоним, ТипПредставление, ПроверятьЗаполнение, ЗначениеЗаполнения",
				Выборка.РеквизитИмя,
				Выборка.РеквизитТип.Получить(),
				Выборка.РеквизитСиноним,
				Выборка.РеквизитТипПредставление,
				Выборка.РеквизитПроверятьЗаполнение,
				Выборка.РеквизитЗначениеЗаполнения
			)
		);
		
	КонецЦикла;	
	
	// Табличные части.
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ТабличнаяЧасть") цикл
		
		Реквизиты = Новый Соответствие;
		
		Результат.ТабличныеЧасти.Вставить(Выборка.ТабличнаяЧасть,
			Новый Структура("Имя, Синоним, Реквизиты",
				Выборка.ТабличнаяЧастьИмя,
				Выборка.ТабличнаяЧастьСиноним,
				Реквизиты
			)
		);
		
		Пока Выборка.Следующий() цикл
			
			Реквизиты.Вставить(Выборка.Реквизит, 
				Новый Структура("Имя, Тип, Синоним, ТипПредставление, ПроверятьЗаполнение",
					Выборка.РеквизитИмя,
					Выборка.РеквизитТип.Получить(),
					Выборка.РеквизитСиноним,
					Выборка.РеквизитТипПредставление,
					Выборка.РеквизитПроверятьЗаполнение
				)	
			);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

Функция МетаданныеФормы(ФормаДанных) Экспорт
	
	Если Ложь тогда
		ФормаДанных = Справочники.мдмФормыДанных.ПустаяСсылка();
	КонецЕсли;	
	
	Результат = Новый Структура;
	
	// Структура метаданных
	Результат.Вставить("Форма", ФормаДанных);
	Результат.Вставить("СхемаДанных");
	Результат.Вставить("Реквизиты", Новый Массив);
	Результат.Вставить("Элементы", Новый Массив);
	Результат.Вставить("ВсеЭлементыФормы", Новый Структура);
	Результат.Вставить("Команды", Новый Массив);
	Результат.Вставить("УсловноеПоведение", 
		Новый Структура("СхемаКомпоновки,Условия,УсловноеОформление,УсловнаяОбязательность",
			Неопределено,
			Новый Массив,
			Новый Массив,
			Новый Массив
		)
	);
	
	// МетаданныеОбъекта
	Результат.СхемаДанных = мдмКэшируемыеФункции.МетаданныеОбъекта(ФормаДанных.СхемаДанных, мдмМетаданные.ВерсияМетаданных());
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	ЗаполнитьПроверяемыеРеквизиты(Результат.СхемаДанных, ПроверяемыеРеквизиты);
	
	// Элементы
	ПрочитатьЭлементыФормы(Результат, Результат.Элементы, ФормаДанных, ПроверяемыеРеквизиты);
	
	// Реквизиты и команды формы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Реквизит,
		|	Реквизиты.Тип КАК Тип,
		|	Реквизиты.Имя КАК Имя,
		|	Реквизиты.Синоним КАК Синоним
		|ИЗ
		|	Справочник.мдмРеквизиты КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Владелец = &Владелец
		|	И Реквизиты.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомандыФормы.Имя КАК Имя,
		|	КомандыФормы.Заголовок КАК Заголовок,
		|	КомандыФормы.ИзменяетСохраняемыеДанные КАК ИзменяетСохраняемыеДанные,
		|	КомандыФормы.АлгоритмКлиент КАК АлгоритмКлиент,
		|	КомандыФормы.АлгоритмСервер КАК АлгоритмСервер
		|ИЗ
		|	Справочник.мдмКомандыФорм КАК КомандыФормы
		|ГДЕ
		|	КомандыФормы.Владелец = &Владелец
		|	И КомандыФормы.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.Условие КАК Условие
		|ИЗ
		|	Справочник.мдмФормыДанных.УсловноеОформление КАК ФормыДанныхБизнесПроцессаУсловноеОформление
		|ГДЕ
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.Ссылка = &Владелец
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.Условие
		|ИЗ
		|	Справочник.мдмФормыДанных.УсловнаяОбязательность КАК ФормыДанныхБизнесПроцессаУсловнаяОбязательность
		|ГДЕ
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.Ссылка = &Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.Условие КАК Условие,
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.ИмяЭлемента КАК ИмяЭлемента,
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.Оформление КАК Оформление
		|ИЗ
		|	Справочник.мдмФормыДанных.УсловноеОформление КАК ФормыДанныхБизнесПроцессаУсловноеОформление
		|ГДЕ
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.Ссылка = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФормыДанныхБизнесПроцессаУсловноеОформление.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.Условие КАК Условие,
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.ПутьКДанным КАК ПутьКДанным,
		|	ФормыДанныхБизнесПроцессаСтруктураФормы.Имя КАК ИмяЭлемента,
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.Проверять КАК Проверять
		|ИЗ
		|	Справочник.мдмФормыДанных.УсловнаяОбязательность КАК ФормыДанныхБизнесПроцессаУсловнаяОбязательность
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.мдмФормыДанных.СтруктураФормы КАК ФормыДанныхБизнесПроцессаСтруктураФормы
		|		ПО ФормыДанныхБизнесПроцессаУсловнаяОбязательность.Ссылка = ФормыДанныхБизнесПроцессаСтруктураФормы.Ссылка
		|			И ФормыДанныхБизнесПроцессаУсловнаяОбязательность.ПутьКДанным = ФормыДанныхБизнесПроцессаСтруктураФормы.ПутьКДанным
		|ГДЕ
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.Ссылка = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФормыДанныхБизнесПроцессаУсловнаяОбязательность.НомерСтроки";
	
	Запрос.УстановитьПараметр("Владелец", ФормаДанных);
	
	РезультатПакет = Запрос.ВыполнитьПакет(); 
	
	// Реквизиты
	Выборка = РезультатПакет[0].Выбрать();
	Пока Выборка.Следующий() цикл
		
		Результат.Реквизиты.Добавить(
			Новый Структура("Имя, Тип, Синоним",
				Выборка.Имя,
				Выборка.Тип.Получить(),
				Выборка.Синоним
			)
		);
		
	КонецЦикла;	
	
	// Команды
	Выборка = РезультатПакет[1].Выбрать();
	Пока Выборка.Следующий() цикл
		
		Результат.Команды.Добавить(
			Новый Структура("Имя, Заголовок, ИзменяетСохраняемыеДанные, АлгоритмКлиент, АлгоритмСервер",
				Выборка.Имя,
				Выборка.Заголовок,
				Выборка.ИзменяетСохраняемыеДанные,
				Выборка.АлгоритмКлиент,
				Выборка.АлгоритмСервер
			)
		);
		
	КонецЦикла;	
	
	// Условное поведение
	Результат.УсловноеПоведение.СхемаКомпоновки = Справочники.мдмОтборы.
		СоздатьСхемуКомпоновкиДанных(Результат.СхемаДанных.Реквизиты, Результат.Реквизиты);
	
	// Условия.
	Выборка = РезультатПакет[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат.УсловноеПоведение.Условия.Добавить(
			Новый Структура("Условие, Отбор",
				Выборка.Условие,
				Выборка.Условие.Отбор
			)
		);    	
		
	КонецЦикла;
	
	// Условное оформление
	Выборка = РезультатПакет[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат.УсловноеПоведение.УсловноеОформление.Добавить(
			Новый Структура("ИмяЭлемента,Условие,Оформление",
				Выборка.ИмяЭлемента,
				Выборка.Условие,
				Выборка.Оформление.Получить()
			)
		);
		
	КонецЦикла;
	
	// Условная обязательность
	Выборка = РезультатПакет[4].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат.УсловноеПоведение.УсловнаяОбязательность.Добавить(
			Новый Структура("Условие,ПутьКДанным,ИмяЭлемента,Проверять",
				Выборка.Условие,
				Выборка.ПутьКДанным,
				Выборка.ИмяЭлемента,
				Выборка.Проверять
			)
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция МетаданныеФормыСписка(НастройкаСписка) Экспорт
	
	Если Ложь тогда
		НастройкаСписка = Справочники.мдмНастройкиСписков.ПустаяСсылка();
	КонецЕсли;	
	
	Результат = Новый Структура;
	
	// Структура метаданных
	Результат.Вставить("Настройка", НастройкаСписка);
	Результат.Вставить("ИмяХранилищаДанных", ИмяХранилищаДанных(НастройкаСписка.СхемаДанных));
	Результат.Вставить("Реквизиты", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Реквизит КАК Реквизит,
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Реквизит.Имя КАК Имя,
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Реквизит.Синоним КАК Синоним,
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Реквизит.Тип КАК Тип,
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Реквизит.ТипПредставление КАК ТипПредставление,
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Показывать КАК Показывать
		|ИЗ
		|	Справочник.мдмНастройкиСписков.РеквизитыСписка КАК НастройкиСпискаБизнесПроцессаРеквизитыСписка
		|ГДЕ
		|	НастройкиСпискаБизнесПроцессаРеквизитыСписка.Ссылка = &НастройкаСписка";
	
	Запрос.УстановитьПараметр("НастройкаСписка", НастройкаСписка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Реквизиты.Добавить(
			Новый Структура("Ссылка, Имя, Синоним, Тип, ТипПредставление, Показывать",
			    Выборка.Реквизит,
				Выборка.Имя,
				Выборка.Синоним,
				Выборка.Тип.Получить(),
				Выборка.ТипПредставление,
				Выборка.Показывать
			)
		);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ТипыОбъектовМастерДанных() Экспорт
	
	Возврат Константы.мдмТипыОбъектовМастерДанных.Получить().Получить();
	
КонецФункции	

Функция ДопустимыеТипыРеквизитов() Экспорт
	
	ОграничениеТипов = Метаданные.ОпределяемыеТипы.мдмЗначениеХранилищаДанных.Тип;
	
	Типы = ОграничениеТипов.Типы();
	Типы.Добавить(Тип("ХранилищеЗначения"));
	
	Возврат Новый ОписаниеТипов(Типы, 
		ОграничениеТипов.КвалификаторыЧисла, 
		ОграничениеТипов.КвалификаторыСтроки, 
		ОграничениеТипов.КвалификаторыДаты, 
		ОграничениеТипов.КвалификаторыДвоичныхДанных);
	
КонецФункции	

Функция ПредставлениеТипа(ОписаниеТипа) Экспорт
	
	ПредставлениеТипа = "";
	
	ТипыРеквизита = ОписаниеТипа.Типы();		
	Для Каждого ТипРеквизита из ТипыРеквизита цикл
		Если ТипРеквизита = Тип("Булево")
			ИЛИ ТипРеквизита = Тип("ХранилищеЗначения") 
			ИЛИ ТипРеквизита = Тип("ОписаниеТипов") тогда
			ПредставлениеТипа = ПредставлениеТипа + ?(ЗначениеЗаполнено(ПредставлениеТипа), ",", "") + Строка(ТипРеквизита);
		ИначеЕсли ТипРеквизита = Тип("Строка") тогда
			Длина = ОписаниеТипа.КвалификаторыСтроки.Длина;
			ПредставлениеТипа = ПредставлениеТипа + ?(ЗначениеЗаполнено(ПредставлениеТипа), ",", "") + Строка(ТипРеквизита);
			Если Не Длина = 0 тогда
				ПредставлениеТипа = ПредставлениеТипа + "("+XMLСтрока(Длина)+")";
			КонецЕсли;	
		ИначеЕсли ТипРеквизита = Тип("Дата") тогда
			ПредставлениеТипа = ПредставлениеТипа + ?(ЗначениеЗаполнено(ПредставлениеТипа), ",", "") + ОписаниеТипа.КвалификаторыДаты.ЧастиДаты;	
		ИначеЕсли ТипРеквизита = Тип("Число") тогда	
			Разрядность = ОписаниеТипа.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			ПредставлениеТипа = ПредставлениеТипа + ?(ЗначениеЗаполнено(ПредставлениеТипа), ",", "") + Строка(ТипРеквизита) + "("+Разрядность+","+РазрядностьДробнойЧасти+")";
		Иначе
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипРеквизита);
			Если ОбъектМетаданных = Неопределено тогда
				Продолжить;
			КонецЕсли;	
			ПредставлениеТипа = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ПредставлениеТипа
	
КонецФункции

Процедура ЗаполнитьПроверяемыеРеквизиты(МетаданныеОбъекта, ПроверяемыеРеквизиты) Экспорт
	
	Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты цикл
		СвойстваРеквизита = Реквизит.Значение;
		Если СвойстваРеквизита.ПроверятьЗаполнение тогда
			ПроверяемыеРеквизиты.Добавить(СвойстваРеквизита.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть из МетаданныеОбъекта.ТабличныеЧасти цикл
		СвойстваТабличнойЧасти = ТабличнаяЧасть.Значение;
		Для Каждого Реквизит из СвойстваТабличнойЧасти.Реквизиты цикл
			СвойстваРеквизита = Реквизит.Значение;
			Если СвойстваРеквизита.ПроверятьЗаполнение тогда
				ПроверяемыеРеквизиты.Добавить(СвойстваТабличнойЧасти.Имя + "." + СвойстваРеквизита.Имя);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область События

Процедура ОбновитьВерсиюМетаданныхПриЗаписи(Источник, Отказ) Экспорт
	
	Константы.мдмВерсияМетаданных.Установить(Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьЭлементыФормы(МетаданныеФормы, Элементы, Форма, ПроверяемыеРеквизиты, ТекущийРодитель = "")
	
	Перем ПутьКДанным;
	
	СтрокиТаблицы = Форма.СтруктураФормы.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));	
	
	Для Каждого Элемент из СтрокиТаблицы цикл
		
		Свойства = мдмКонструкторФормыКлиентСервер.СвойстваЭлементаСтруктурыФормы(Элемент, Элемент.Свойства.Получить());
		
		ЭлементыПотомки = Новый Массив;
		
		СвойстваЭлемента = Новый Структура;
		СвойстваЭлемента.Вставить("События", Новый Структура);
		СвойстваЭлемента.Вставить("ДополнительныеСобытия", Новый Структура);
		
		Для Каждого КлючЗначение из Свойства цикл
			
			Свойство = КлючЗначение.Значение;
			
			Если КлючЗначение.Значение.ЭтоСобытиеПлатформы тогда
				Если ЗначениеЗаполнено(Свойство.КодСобытия) И ЗначениеЗаполнено(Свойство.Значение) тогда
					СвойстваЭлемента.События.Вставить(КлючЗначение.Ключ, Свойство.КодСобытия);
				КонецЕсли;	
			ИначеЕсли КлючЗначение.Значение.ЭтоСобытие тогда	
				Если ЗначениеЗаполнено(Свойство.КодСобытия) И ЗначениеЗаполнено(Свойство.Значение) тогда
					СвойстваЭлемента.ДополнительныеСобытия.Вставить(КлючЗначение.Ключ, Свойство.КодСобытия);
				КонецЕсли;	
			Иначе  
				СвойстваЭлемента.Вставить(КлючЗначение.Ключ, Свойство.Значение);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если СвойстваЭлемента.Свойство("ПутьКДанным", ПутьКДанным)
			И ПроверяемыеРеквизиты.Найти(ПутьКДанным) <> Неопределено тогда
			
			СвойстваЭлемента.АвтоОтметкаНезаполненного = Истина;		
			
		КонецЕсли;	
		
		Если Элемент.ТипЭлемента = "Форма" тогда
			
			ЭлементыПотомки = Элементы;
			
			МетаданныеФормы.ВсеЭлементыФормы.Вставить("Форма", СвойстваЭлемента);
			
		Иначе 
			
			Элементы.Добавить(
				Новый Структура("Свойства, Элементы",
					СвойстваЭлемента,
					ЭлементыПотомки
				)
			);
			
			МетаданныеФормы.ВсеЭлементыФормы.Вставить(СвойстваЭлемента.Имя, СвойстваЭлемента);
			
		КонецЕсли;
		
		ПрочитатьЭлементыФормы(МетаданныеФормы, ЭлементыПотомки, Форма, ПроверяемыеРеквизиты, Элемент.Идентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ИмяХранилищаДанных(СхемаДанных)
	
	Если СхемаДанных.Хранилище = Перечисления.мдмХранилищеДанных.Расширение тогда
		Возврат СхемаДанных.ИмяОбъектаРасширения;
	ИначеЕсли ЗначениеЗаполнено(СхемаДанных.Хранилище) тогда
		Возврат "мдмДанныеПроцессов" + XMLСтрока(СхемаДанных.Хранилище);	
	Иначе 
		Возврат "мдмДанныеПроцессовОбщее";
	КонецЕсли;	
	
КонецФункции	

#КонецОбласти