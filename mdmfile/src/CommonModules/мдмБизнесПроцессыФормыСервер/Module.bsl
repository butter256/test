
#Область ПрограммныйИнтерфейс

#Область СтандартныеСобытия

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ФормаДанных) тогда
		
		СоздатьОбновитьФормуДанных(Форма);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Реквизиты формы
	Реквизиты = Новый Массив;
	
	мдмКонструкторФормыСервер.ДобавитьРеквизит(Реквизиты, "УдаляемыеРеквизиты",   мдмКонструкторФормыСервер.ОписаниеТипа("СписокЗначений"));
	мдмКонструкторФормыСервер.ДобавитьРеквизит(Реквизиты, "ДобавленныеРеквизиты", мдмКонструкторФормыСервер.ОписаниеТипа("СписокЗначений"));
	мдмКонструкторФормыСервер.ДобавитьРеквизит(Реквизиты, "ДобавленныеЭлементы",  мдмКонструкторФормыСервер.ОписаниеТипа("Неопределено"));
	мдмКонструкторФормыСервер.ДобавитьРеквизит(Реквизиты, "ДобавленныеКоманды",   мдмКонструкторФормыСервер.ОписаниеТипа("Неопределено"));
	мдмКонструкторФормыСервер.ДобавитьРеквизит(Реквизиты, "ПеременныеФормы",      мдмКонструкторФормыСервер.ОписаниеТипа("Неопределено"));
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	Форма.ПеременныеФормы = Новый Структура;
	
	СоздатьОбновитьФормуДанных(Форма, Отказ, СтандартнаяОбработка);
	
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МетаданныеФормы = мдмКэшируемыеФункции.МетаданныеФормыДанных(Форма.ФормаДанных, мдмМетаданные.ВерсияМетаданных());
	
	мдмМетаданные.ЗаполнитьПроверяемыеРеквизиты(МетаданныеФормы.СхемаДанных, ПроверяемыеРеквизиты);
	
	ВычисленныеУсловия = ВычислитьУсловияФормы(Форма, МетаданныеФормы);	
	
	Для Каждого Элемент из МетаданныеФормы.УсловноеПоведение.УсловнаяОбязательность цикл
		УсловиеВыполняется = (ВычисленныеУсловия.Получить(Элемент.Условие) = Истина);
		Если УсловиеВыполняется тогда
			НайденныйЭлемент = ПроверяемыеРеквизиты.Найти(Элемент.ПутьКДанным);
			Если Элемент.Проверять И НайденныйЭлемент = Неопределено тогда
				ПроверяемыеРеквизиты.Добавить(Элемент.ПутьКДанным);
			ИначеЕсли Не Элемент.Проверять И НайденныйЭлемент <> Неопределено тогда 	
				ПроверяемыеРеквизиты.Удалить(НайденныйЭлемент);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Форма.ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеПроцесса", ДанныеПроцессаФормы(Форма));	
	
КонецПроцедуры

Процедура СоздатьОбновитьФормуДанных(Форма, Отказ = Ложь, СтандартнаяОбработка = Истина) Экспорт
	
	Конструктор = мдмКонструкторФормыСервер;
	
	Если Не ЗначениеЗаполнено(Форма.ФормаДанных) тогда
		Форма.ФормаДанных = мдмКонструкторФормыСервер.ФормаДанных(Форма.Объект, ТипЗнч(Форма.Объект.Ссылка));
	КонецЕсли;	
	
	МетаданныеФормы = мдмКэшируемыеФункции.МетаданныеФормыДанных(Форма.ФормаДанных, мдмМетаданные.ВерсияМетаданных());
	
	// Реквизиты
	Реквизиты = Новый Массив;
	
	Для Каждого Реквизит из МетаданныеФормы.СхемаДанных.Реквизиты цикл
		СвойстваРеквизита = Реквизит.Значение;
		Конструктор.ДобавитьРеквизит(Реквизиты, СвойстваРеквизита.Имя, СвойстваРеквизита.Тип,, СвойстваРеквизита.Синоним, Истина);  
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть из МетаданныеФормы.СхемаДанных.ТабличныеЧасти цикл
		СвойстваТабличнойЧасти = ТабличнаяЧасть.Значение;
		Конструктор.ДобавитьРеквизит(Реквизиты, СвойстваТабличнойЧасти.Имя, Конструктор.ОписаниеТипа("ТаблицаЗначений"),, СвойстваРеквизита.Синоним, Истина);  
		
		Для Каждого Реквизит из СвойстваТабличнойЧасти.Реквизиты цикл
			СвойстваРеквизита = Реквизит.Значение;
			Конструктор.ДобавитьРеквизит(Реквизиты, СвойстваРеквизита.Имя, СвойстваРеквизита.Тип, СвойстваТабличнойЧасти.Имя, СвойстваРеквизита.Синоним, Истина);  
		КонецЦикла;	
	КонецЦикла;	
	
	Для Каждого Реквизит из МетаданныеФормы.Реквизиты цикл
		Конструктор.ДобавитьРеквизит(Реквизиты, Реквизит.Имя, Реквизит.Тип,, Реквизит.Синоним, Истина);  
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(Реквизиты, Форма.УдаляемыеРеквизиты.ВыгрузитьЗначения());
	
	Форма.УдаляемыеРеквизиты.ЗагрузитьЗначения(мдмКонструкторФормыСервер.УдаляемыеРеквизиты(Реквизиты));
	Форма.ДобавленныеРеквизиты.ЗагрузитьЗначения(мдмКонструкторФормыСервер.ДобавленныеРеквизитыФормы(Реквизиты));
	
	ДобавленныеКоманды = Новый Структура;
	
	Для Каждого Команда из МетаданныеФормы.Команды цикл
		Конструктор.ДобавитьКоманду(Форма, Команда.Имя, Команда.Заголовок, Команда.ИзменяетСохраняемыеДанные);
		
		ДобавленныеКоманды.Вставить(Команда.Имя, 
			Новый Структура("АлгоритмКлиент, АлгоритмСервер",
				Команда.АлгоритмКлиент,
				Команда.АлгоритмСервер
			)
		);
	КонецЦикла;	
	
	Форма.ДобавленныеКоманды = Новый ФиксированнаяСтруктура(ДобавленныеКоманды);	
	
	// Элементы
	УдалитьЭлементы(Форма, Форма.ЭлементДанныхФормы().ПодчиненныеЭлементы);
	
	СоздатьЭлементы(Форма, МетаданныеФормы.Элементы, Форма.ЭлементДанныхФормы());
	
	Форма.ДобавленныеЭлементы = Новый ФиксированнаяСтруктура(МетаданныеФормы.ВсеЭлементыФормы);
	
	ЗаполнитьРеквизитыФормы(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФормы(Форма) Экспорт
	
	Перем Объект;
	
	ТипОбъекта = ТипЗнч(Форма.Объект.Ссылка);
	
	Если ТипОбъекта = Тип("ЗадачаСсылка.мдмЗадачаОбработки") тогда
		Объект = мдмХранилищеДанных.ПолучитьОбъект(Форма.Объект.БизнесПроцесс.Данные);	
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.мдмПроцессОбработки") тогда
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) тогда 
			ПроцессОбработкиОбъект = Форма.РеквизитФормыВЗначение("Объект");
			ПроцессОбработкиОбъект.Заполнить(Новый Структура("ЗаполнениеДанныхЗаявки"));
			ПроцессОбработкиОбъект.ДополнительныеСвойства.Свойство("ДанныеПроцесса", Объект);
		Иначе 	
			Объект = мдмХранилищеДанных.ПолучитьОбъект(Форма.Объект.Данные);
		КонецЕсли;	
	Иначе 
		Возврат;
	КонецЕсли;	
	
	Если Объект = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	МетаданныеОбъекта = мдмКэшируемыеФункции.МетаданныеОбъекта(Объект.СхемаДанных, мдмМетаданные.ВерсияМетаданных());
	
	МетаданныеФормы = мдмКэшируемыеФункции.МетаданныеФормыДанных(Форма.ФормаДанных, мдмМетаданные.ВерсияМетаданных());
	
	Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты Цикл 
		
		Если МетаданныеФормы.СхемаДанных.Реквизиты.Получить(Реквизит.Ключ) = Неопределено тогда
			Продолжить;
		КонецЕсли;	
		
		СвойстваРеквизита = Реквизит.Значение;
		
		Если мдмКонструкторФормыСервер.ОписаниеТипаДляФормы(СвойстваРеквизита.Тип) = Неопределено тогда
			Продолжить;
		КонецЕсли;	
		
		Форма[СвойстваРеквизита.Имя] = Объект[СвойстваРеквизита.Имя];
		
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть из МетаданныеОбъекта.ТабличныеЧасти Цикл 
		
		Если МетаданныеФормы.СхемаДанных.ТабличныеЧасти.Получить(ТабличнаяЧасть.Ключ) = Неопределено тогда
			Продолжить;
		КонецЕсли;	
		
		СвойстваТабличнойЧасти = ТабличнаяЧасть.Значение;
		
		Для Каждого Реквизит из СвойстваТабличнойЧасти.Реквизиты цикл
			СвойстваРеквизита = Реквизит.Значение;
			Если мдмКонструкторФормыСервер.ОписаниеТипаДляФормы(СвойстваРеквизита.Тип) = Неопределено тогда
				Объект[СвойстваТабличнойЧасти.Имя].Колонки.Удалить(СвойстваРеквизита.Имя);
			КонецЕсли;	
		КонецЦикла;	
		
		Форма.ЗначениеВРеквизитФормы(Объект[СвойстваТабличнойЧасти.Имя], СвойстваТабличнойЧасти.Имя)
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ДанныеПроцессаФормы(Форма, МетаданныеОбъекта = Неопределено) Экспорт
	
	Если МетаданныеОбъекта = Неопределено тогда
		МетаданныеОбъекта = мдмКэшируемыеФункции.МетаданныеФормыДанных(Форма.ФормаДанных, мдмМетаданные.ВерсияМетаданных()).СхемаДанных;	
	КонецЕсли;
	
	Результат = мдмХранилищеДанных.СоздатьОбъект(МетаданныеОбъекта);
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.мдмПроцессОбработки") тогда
		Результат.Ссылка = Форма.Объект.Данные;			
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ЗадачаОбъект.мдмЗадачаОбработки") тогда
		Результат.Ссылка = Форма.Объект.БизнесПроцесс.Данные;		
	КонецЕсли;	

	Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты Цикл 
		
		СвойстваРеквизита = Реквизит.Значение;
		
		Результат[СвойстваРеквизита.Имя] = Форма[СвойстваРеквизита.Имя];
		
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть из МетаданныеОбъекта.ТабличныеЧасти Цикл 
		
		СвойстваТабличнойЧасти = ТабличнаяЧасть.Значение;
		
		Результат[СвойстваТабличнойЧасти.Имя] = Форма.РеквизитФормыВЗначение(СвойстваТабличнойЧасти.Имя);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

Функция ДанныеФормыДляУсловногоОформления(Форма, МетаданныеФормы) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит из МетаданныеФормы.СхемаДанных.Реквизиты Цикл 
		СвойстваРеквизита = Реквизит.Значение;
		Таблица.Колонки.Добавить(СвойстваРеквизита.Имя, СвойстваРеквизита.Тип);
	КонецЦикла;	
	
	Для Каждого Реквизит из МетаданныеФормы.Реквизиты цикл
		Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;	
	
	ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Форма);
	
	Возврат Таблица;
	
КонецФункции	

#КонецОбласти

#Область ПодключаемыеСобытия

Процедура ОбновитьУсловноеОформление(Форма) Экспорт
	
	МетаданныеФормы = мдмКэшируемыеФункции.МетаданныеФормыДанных(Форма.ФормаДанных, мдмМетаданные.ВерсияМетаданных());
	
	ВосстановитьОформление(Форма, МетаданныеФормы.Элементы);
	
	ВычисленныеУсловия = ВычислитьУсловияФормы(Форма, МетаданныеФормы);
	
	Для Каждого Элемент из МетаданныеФормы.УсловноеПоведение.УсловноеОформление цикл
		
		УсловиеВыполняется = (ВычисленныеУсловия.Получить(Элемент.Условие) = Истина);
		
		Если УсловиеВыполняется тогда
			
			ПрименитьОформление(Форма, Элемент.Оформление, Элемент.ИмяЭлемента);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОформлениеОбязательности = Новый Структура;
	ОформлениеОбязательности.Вставить("АвтоОтметкаНезаполненного", Истина);
	
	Для Каждого Элемент из МетаданныеФормы.УсловноеПоведение.УсловнаяОбязательность цикл
		
		УсловиеВыполняется = (ВычисленныеУсловия.Получить(Элемент.Условие) = Истина);
		
		Если УсловиеВыполняется тогда
			
			ОформлениеОбязательности.АвтоОтметкаНезаполненного = Элемент.Проверять;
			
			ПрименитьОформление(Форма, ОформлениеОбязательности, Элемент.ИмяЭлемента);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОбработатьСобытиеПриУсловномОформленииНаСервере(Форма);
	
КонецПроцедуры	

Функция ВычислитьУсловияФормы(Форма, МетаданныеФормы = Неопределено)
	
	Если МетаданныеФормы = Неопределено тогда
		МетаданныеФормы = мдмКэшируемыеФункции.МетаданныеФормыДанных(Форма.ФормаДанных, мдмМетаданные.ВерсияМетаданных());
	КонецЕсли;	
	
	ДанныеПроцесса = ДанныеФормыДляУсловногоОформления(Форма, МетаданныеФормы);
	
	ВычисленныеУсловия = Новый Соответствие;
	
	Для Каждого Элемент из МетаданныеФормы.УсловноеПоведение.Условия цикл
		
		Попытка
			Результат = Справочники.мдмОтборы.ПроверитьУсловиеОформления(
				МетаданныеФормы.УсловноеПоведение.СхемаКомпоновки,
				ДанныеПроцесса,
				мдмОбщегоНазначенияСервер.ДесериализоватьИзXML(Элемент.Отбор)
			);
		Исключение
			Результат = Ложь;	
		КонецПопытки;
		
		ВычисленныеУсловия.Вставить(Элемент.Условие, Результат);
		
	КонецЦикла;	
	
	Возврат ВычисленныеУсловия;
	
КонецФункции	

Процедура ОбработатьСобытиеПриИзмененииНаСервере(Форма, Элемент) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеПриИзмененииНаСервере(Форма, Элемент);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьСобытие(Форма, Элемент, "ПриИзмененииНаСервере");	
	
КонецПроцедуры	

Процедура ОбработатьСобытиеДействиеНаСервере(Форма, Имя, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеДействиеНаСервере(Форма, Имя, ВходныеПараметры, ВыходныеПараметры);
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Имя", Имя);
	ПараметрыСобытия.Вставить("ВходныеПараметры", ВходныеПараметры);
	ПараметрыСобытия.Вставить("ВыходныеПараметры", ВыходныеПараметры);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьСобытие(Форма, "Форма", "ДействиеНаСервере", ПараметрыСобытия);
	
	ПараметрыСобытия.Свойство("Имя", Имя);
	ПараметрыСобытия.Свойство("ВходныеПараметры", ВходныеПараметры);
	ПараметрыСобытия.Свойство("ВыходныеПараметры", ВыходныеПараметры);
	
КонецПроцедуры	

Процедура ОбработатьСобытиеПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Отказ", Отказ);
	ПараметрыСобытия.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьСобытие(Форма, "Форма", "ПриСозданииНаСервере", ПараметрыСобытия);
	
	ПараметрыСобытия.Свойство("Отказ", Отказ);
	ПараметрыСобытия.Свойство("СтандартнаяОбработка", СтандартнаяОбработка);
	
КонецПроцедуры	

Процедура ОбработатьСобытиеОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Отказ", Отказ);
	ПараметрыСобытия.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизиты);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьСобытие(Форма, "Форма", "ОбработкаПроверкиЗаполненияНаСервере", ПараметрыСобытия);
	
	ПараметрыСобытия.Свойство("Отказ", Отказ);
	
КонецПроцедуры

Процедура ОбработатьСобытиеПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Отказ", Отказ);
	ПараметрыСобытия.Вставить("ТекущийОбъект", ТекущийОбъект);
	ПараметрыСобытия.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьСобытие(Форма, "Форма", "ПередЗаписьюНаСервере", ПараметрыСобытия);
	
	ПараметрыСобытия.Свойство("Отказ", Отказ);
	
КонецПроцедуры	

Процедура ОбработатьСобытиеДействиеКомандыНаСервере(Форма, Команда) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеДействиеКомандыНаСервере(Форма, Команда);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьКоманду(Форма, Команда, "Сервер");
	
КонецПроцедуры

Процедура ОбработатьСобытиеПриУсловномОформленииНаСервере(Форма) Экспорт
	
	мдмБизнесПроцессыФормыСерверПереопределяемый.ОбработатьСобытиеПриУсловномОформлении(Форма);
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("Элементы", Форма.Элементы);
	
	мдмБизнесПроцессыФормыКлиентСервер.ОбработатьСобытие(Форма, "Форма", "ПриУсловномОформленииНаСервере", ПараметрыСобытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедуры

Процедура ВосстановитьОформление(Форма, Элементы)
	
	Для Каждого Элемент из Элементы цикл
		
		ЭлементФормы = Форма.Элементы.Найти(Элемент.Свойства.Имя);
		
		Если ЭлементФормы = Неопределено тогда
			Продолжить;
		КонецЕсли;	
		
		ОформляемыеСвойства = мдмКонструкторФормыКлиентСервер.ОформляемыеСвойства(Элемент.Свойства);
		СвойстваЭлемента = Элемент.Свойства;
		
		Для Каждого ОформляемоеСвойство из ОформляемыеСвойства цикл
			ЭлементФормы[ОформляемоеСвойство.Ключ] = СвойстваЭлемента[ОформляемоеСвойство.Ключ];
		КонецЦикла;	
		
		Если СвойстваЭлемента.Свойство("АвтоОтметкаНезаполненного") тогда
			ЭлементФормы.АвтоОтметкаНезаполненного = СвойстваЭлемента.АвтоОтметкаНезаполненного;
			ЭлементФормы.ОтметкаНезаполненного = Ложь;
		КонецЕсли;	
		
		ВосстановитьОформление(Форма, Элемент.Элементы)
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПрименитьОформление(Форма, Оформление, ИмяЭлемента)
	
	ЭлементФормы = Форма.Элементы[ИмяЭлемента];
	Для Каждого КлючЗначение из Оформление цикл
		ЭлементФормы[КлючЗначение.Ключ] = КлючЗначение.Значение;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УдалитьЭлементы(Форма, Элементы)
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого Элемент из Элементы цикл
		УдаляемыеЭлементы.Добавить(Элемент);	
	КонецЦикла;	

	Для Каждого Элемент из УдаляемыеЭлементы цикл
		Форма.Элементы.Удалить(Элемент);	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьЭлементы(Форма, Элементы, Родитель = Неопределено)
	
	Перем ПутьКДанным,Заголовок;
	
	Для Каждого Элемент из Элементы цикл
		
		Свойства = Элемент.Свойства;
		
		Свойства.Свойство("ПутьКДанным", ПутьКДанным);
		Свойства.Свойство("Заголовок", Заголовок);
		
		НовыйЭлемент = мдмКонструкторФормыСервер.СоздатьЭлементФормы(
			Форма, 
			Свойства.Имя, 
			Заголовок, 
			Свойства.ТипЭлемента,
			Родитель, 
			ПутьКДанным, 
			Свойства
		);
		
		СоздатьЭлементы(Форма, Элемент.Элементы, НовыйЭлемент)
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти