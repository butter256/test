
#Область ПрограммныйИнтерфейс

Функция ДобавитьЭлементФормы(СтруктураФормы, Имя, Заголовок, Тип, ПутьКДанным = Неопределено, ИмяКоманды = Неопределено) Экспорт
	
	Перем Элемент;
	
	Если Тип = "ПолеВвода" тогда
		Элемент = ДобавитьПолеВвода(СтруктураФормы, Имя, Заголовок, ПутьКДанным);	
	ИначеЕсли Тип = "ПолеФлажка" тогда	
		Элемент = ДобавитьПолеФлажка(СтруктураФормы, Имя, Заголовок, ПутьКДанным);
	ИначеЕсли Тип = "Группа" тогда	
		Элемент = ДобавитьГруппу(СтруктураФормы, Имя, Заголовок);
	ИначеЕсли Тип = "Страницы" тогда			
		Элемент = ДобавитьСтраницы(СтруктураФормы, Имя, Заголовок);
	ИначеЕсли Тип = "Страница" тогда	
		Элемент = ДобавитьСтраницу(СтруктураФормы, Имя, Заголовок);
	ИначеЕсли Тип = "Надпись" тогда	
		Элемент = ДобавитьНадпись(СтруктураФормы, Имя, Заголовок);
	ИначеЕсли Тип = "Кнопка" тогда	
		Элемент = ДобавитьКнопку(СтруктураФормы, Имя, Заголовок, ИмяКоманды);
	ИначеЕсли Тип = "Таблица" тогда	
		Элемент = ДобавитьТаблицу(СтруктураФормы, Имя, Заголовок, ПутьКДанным);
	ИначеЕсли Тип = "КоманднаяПанель" тогда	
		Элемент = ДобавитьКоманднуюПанель(СтруктураФормы, Имя);
	Иначе 
		ВызватьИсключение "Неизвестный тип элемента " + Тип;
	КонецЕсли;	
	
	Возврат Элемент;
		
КонецФункции	

Функция ОформляемыеСвойства(Элемент) Экспорт
	
	СвойстваЭлемента = СвойстваЭлемента(Элемент);
	
	Результат = Новый Структура;
	
	Для Каждого КлючЗначение из СвойстваЭлемента цикл
		Если КлючЗначение.Значение.ЭтоУсловноеСвойство тогда
			Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

// Объединение фактических свойств и свойтв по умолчанию.
//
Функция СвойстваЭлементаСтруктурыФормы(Элемент, ФактическиеСвойства = Неопределено) Экспорт
	
	СвойстваПоУмолчанию = СвойстваЭлемента(Элемент);
	
	Если ФактическиеСвойства = Неопределено тогда
		ФактическиеСвойства = Элемент.Свойства;
	КонецЕсли;	
	
	Для Каждого КлючЗначение из ФактическиеСвойства цикл
		Если СвойстваПоУмолчанию.Свойство(КлючЗначение.Ключ) тогда
			ФактическиеСвойства[КлючЗначение.Ключ].Список = СвойстваПоУмолчанию[КлючЗначение.Ключ].Список;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ФактическиеСвойства <> Неопределено тогда
		ЗаполнитьЗначенияСвойств(СвойстваПоУмолчанию, ФактическиеСвойства);
	КонецЕсли;	
	
	Возврат СвойстваПоУмолчанию;
	
КонецФункции	

Функция СвойстваЭлемента(Элемент) Экспорт
	
	Свойства = Новый Структура;
	
	Тип = Элемент.ТипЭлемента;
	
	Если Тип = "ПолеВвода" тогда
		Свойства = СвойстваПоляВвода(Элемент);	
	ИначеЕсли Тип = "ПолеФлажка" тогда	
		Свойства = СвойстваПоляФлажка(Элемент);
	ИначеЕсли Тип = "Группа" тогда	
		Свойства = СвойстваГруппы(Элемент);
	ИначеЕсли Тип = "Страницы" тогда		
		Свойства = СвойстваГруппыСтраницы(Элемент);
	ИначеЕсли Тип = "Страница" тогда	
		Свойства = СвойстваГруппыСтраница(Элемент);
	ИначеЕсли Тип = "Надпись" тогда	
		Свойства = СвойстваНадписи(Элемент);
	ИначеЕсли Тип = "Кнопка" тогда	
		Свойства = СвойстваКнопки(Элемент);
	ИначеЕсли Тип = "Таблица" тогда	
		Свойства = СвойстваТаблицы(Элемент);
	ИначеЕсли Тип = "КоманднаяПанель" тогда	
		Свойства = СвойстваГруппыКоманднаяПанель(Элемент);
	ИначеЕсли Тип = "Форма" тогда		
		Свойства = СвойстваФормы(Элемент);
	Иначе 
		ВызватьИсключение "Неизвестный тип элемента " + Тип;
	КонецЕсли;	
	
	Возврат Свойства;
	
КонецФункции	

Функция ДобавитьФорму(СтруктураФормы) Экспорт
	
	Тип = "Форма";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = "Форма";
	Элемент.Заголовок = "Форма";
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаФорма();		
	
	Свойства = СвойстваФормы(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваФормы(Знач Элемент)
	
	Свойства = Новый Структура;
	Свойства.Вставить("Заголовок",             СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ТолькоПросмотр",        СвойствоЭлемента(Ложь));
	// События
	Свойства.Вставить("ПриСозданииНаСервере",                 СвойствоЭлемента("", "ПриСозданииНаСервере"          ,, Истина));
	Свойства.Вставить("ОбработкаПроверкиЗаполненияНаСервере", СвойствоЭлемента("", "ОбработкаПроверкиЗаполненияНаСервере"   ,, Истина));
	Свойства.Вставить("ПередЗаписью",                         СвойствоЭлемента("", "ПередЗаписью"                  ,, Истина));
	Свойства.Вставить("ПередЗаписьюНаСервере",                СвойствоЭлемента("", "ПередЗаписьюНаСервере"         ,, Истина));
	Свойства.Вставить("ПослеЗаписи",                          СвойствоЭлемента("", "ПослеЗаписи"                   ,, Истина));
	Свойства.Вставить("ПриОбработкеОповещения",               СвойствоЭлемента("", "ПриОбработкеОповещения"        ,, Истина));
	Свойства.Вставить("ПриУсловномОформленииНаСервере",       СвойствоЭлемента("", "ПриУсловномОформленииНаСервере",, Истина));
	Свойства.Вставить("ДействиеНаСервере",                    СвойствоЭлемента("", "ДействиеНаСервере"             ,, Истина));
	Свойства.Вставить("ПередЗакрытием",                       СвойствоЭлемента("", "ПередЗакрытием"                ,, Истина));
	
	// Условные свойства
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьПолеВвода(СтруктураФормы, Имя, Заголовок, ПутьКДанным) Экспорт
	
	Тип = "ПолеВвода";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ПутьКДанным = ПутьКДанным;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаПоле();		
	
	Свойства = СвойстваПоляВвода(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваПоляВвода(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",                         СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",                   СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ПутьКДанным",                 СвойствоЭлемента(Элемент.ПутьКДанным));
	Свойства.Вставить("ТипЭлемента",                 СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("ОтображатьЗаголовок",         СвойствоЭлемента(Истина));
	Свойства.Вставить("ПоложениеЗаголовка",          СвойствоЭлемента("Лево", "Лево,Право,Верх"));
	Свойства.Вставить("ТолькоПросмотр",              СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",                   СвойствоЭлемента(Истина));
	Свойства.Вставить("Маска",                       СвойствоЭлемента(""));
	Свойства.Вставить("МногострочныйРежим",          СвойствоЭлемента(Ложь));	
	Свойства.Вставить("КнопкаОчистки",               СвойствоЭлемента("Авто", "Авто,Нет,Да"));
	Свойства.Вставить("КнопкаВыбора",                СвойствоЭлемента("Авто", "Авто,Нет,Да"));
	Свойства.Вставить("КнопкаОткрытия",              СвойствоЭлемента("Авто", "Авто,Нет,Да"));
	Свойства.Вставить("ВыборГруппИЭлементов",        СвойствоЭлемента("Авто", "Элементы,Группы,ГруппыИЭлементы")); 
	Свойства.Вставить("РедактированиеТекста",        СвойствоЭлемента(Истина));
	Свойства.Вставить("РежимВыбораИзСписка",         СвойствоЭлемента(Ложь));
	Свойства.Вставить("СписокВыбора",                СвойствоЭлемента(Новый СписокЗначений));
	Свойства.Вставить("АвтоОтметкаНезаполненного",   СвойствоЭлемента(Ложь)); 
	Свойства.Вставить("СвязиПараметровВыбора",       СвойствоЭлемента("")); 
	Свойства.Вставить("ОбновлятьУсловноеОформление", СвойствоЭлемента(Истина));
	
	ОбщиеСвойства(Свойства);
	
	// События
	Свойства.Вставить("ПриИзменении",          СвойствоЭлемента("", "ПриИзменении"         ,, Истина, Истина));
	Свойства.Вставить("ПриИзмененииНаСервере", СвойствоЭлемента("", "ПриИзмененииНаСервере",, Истина));
	Свойства.Вставить("НачалоВыбора",          СвойствоЭлемента("", "НачалоВыбора"         ,, Истина, Истина));
	Свойства.Вставить("ОбработкаВыбора",       СвойствоЭлемента("", "ОбработкаВыбора"      ,, Истина, Истина));
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	Свойства.Маска.ЭтоУсловноеСвойство          = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьПолеФлажка(СтруктураФормы, Имя, Заголовок, ПутьКДанным) Экспорт
	
	Тип = "ПолеФлажка";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ПутьКДанным = ПутьКДанным;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаПоле();		
	
	Свойства = СвойстваПоляФлажка(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваПоляФлажка(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",                 СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",           СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ПутьКДанным",         СвойствоЭлемента(Элемент.ПутьКДанным));
	Свойства.Вставить("ТипЭлемента",         СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("ОтображатьЗаголовок", СвойствоЭлемента(Истина));
	Свойства.Вставить("ТолькоПросмотр",      СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",           СвойствоЭлемента(Истина));
	
	Свойства.Вставить("ОбновлятьУсловноеОформление", СвойствоЭлемента(Истина));

	//ОбщиеСвойства(Свойства);
	
	// События
	Свойства.Вставить("ПриИзменении",          СвойствоЭлемента("", "ПриИзменении",, Истина, Истина));
	Свойства.Вставить("ПриИзмененииНаСервере", СвойствоЭлемента("", "ПриИзмененииНаСервере",, Истина));
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьТаблицу(СтруктураФормы, Имя, Заголовок, ПутьКДанным) Экспорт
	
	Тип = "Таблица";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ПутьКДанным = ПутьКДанным;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаТаблица();		
	
	Свойства = СвойстваТаблицы(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваТаблицы(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",                      СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",                СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ПутьКДанным",              СвойствоЭлемента(Элемент.ПутьКДанным));
	Свойства.Вставить("ТипЭлемента",              СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("ОтображатьЗаголовок",      СвойствоЭлемента(Истина));
	Свойства.Вставить("ТолькоПросмотр",           СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",                СвойствоЭлемента(Истина));
	Свойства.Вставить("ИзменятьСоставСтрок",      СвойствоЭлемента(Истина));
	Свойства.Вставить("ИзменятьПорядокСтрок",     СвойствоЭлемента(Истина));
	Свойства.Вставить("ПоказыватьКоманднуюПанель",СвойствоЭлемента(Истина));
	
	ОбщиеСвойства(Свойства);
	
	// События
	Свойства.Вставить("ПриИзменении",               СвойствоЭлемента("", "ПриИзменении"              ,, Истина, Истина));
	Свойства.Вставить("ПриИзмененииНаСервере",      СвойствоЭлемента("", "ПриИзмененииНаСервере"     ,, Истина));
	Свойства.Вставить("ПриНачалеРедактирования",    СвойствоЭлемента("", "ПриНачалеРедактирования"   ,, Истина, Истина));
	Свойства.Вставить("ПриОкончанииРедактирования", СвойствоЭлемента("", "ПриОкончанииРедактирования",, Истина, Истина));
	Свойства.Вставить("ПередНачаломДобавления",     СвойствоЭлемента("", "ПередНачаломДобавления"    ,, Истина, Истина));
	Свойства.Вставить("ПередНачаломИзменения",      СвойствоЭлемента("", "ПередНачаломИзменения"     ,, Истина, Истина));
	Свойства.Вставить("ПередУдалением",             СвойствоЭлемента("", "ПередУдалением"            ,, Истина, Истина));
	Свойства.Вставить("ПослеУдаления",              СвойствоЭлемента("", "ПослеУдаления"             ,, Истина, Истина));
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции	

Функция ДобавитьГруппу(СтруктураФормы, Имя, Заголовок) Экспорт
	
	Тип = "Группа";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаГруппа();		
	
	Свойства = СвойстваГруппы(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваГруппы(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",                 СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",           СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ТипЭлемента",         СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("Группировка",         СвойствоЭлемента("Вертикальная", ГруппировкаПодчиненныхЭлементовФормы()));
	Свойства.Вставить("ОтображатьЗаголовок", СвойствоЭлемента(Истина));
	Свойства.Вставить("ТолькоПросмотр",      СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",           СвойствоЭлемента(Истина));
	Свойства.Вставить("Свертываемая",        СвойствоЭлемента(Ложь));
	
	ОбщиеСвойства(Свойства);
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьСтраницы(СтруктураФормы, Имя, Заголовок) Экспорт
	
	Тип = "Страницы";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаГруппа();		
	
	Свойства = СвойстваГруппыСтраницы(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваГруппыСтраницы(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",                СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",          СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ТипЭлемента",        СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("ОтображениеСтраниц", СвойствоЭлемента("ЗакладкиСверху", ОтображениеСтраницФормы()));
	Свойства.Вставить("ТолькоПросмотр",     СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",          СвойствоЭлемента(Истина));
	
	ОбщиеСвойства(Свойства);
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьСтраницу(СтруктураФормы, Имя, Заголовок) Экспорт
	
	Тип = "Страница";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаГруппа();		
	
	Свойства = СвойстваГруппыСтраница(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваГруппыСтраница(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",                 СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",           СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ТипЭлемента",         СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("ОтображатьЗаголовок", СвойствоЭлемента(Истина));
	Свойства.Вставить("ТолькоПросмотр",      СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",           СвойствоЭлемента(Истина));
	
	ОбщиеСвойства(Свойства);
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьКоманднуюПанель(СтруктураФормы, Имя) Экспорт
	
	Тип = "КоманднаяПанель";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаГруппа();		
	
	Свойства = СвойстваГруппыКоманднаяПанель(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваГруппыКоманднаяПанель(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",            СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("ТипЭлемента",    СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("ТолькоПросмотр", СвойствоЭлемента(Ложь));
	Свойства.Вставить("Видимость",      СвойствоЭлемента(Истина));
	
	ОбщиеСвойства(Свойства);
	
	// Условные свойства
	Свойства.ТолькоПросмотр.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьНадпись(СтруктураФормы, Имя, Заголовок) Экспорт
	
	Тип = "Надпись";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.Заголовок = Заголовок;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаПоле();		
	
	Свойства = СвойстваНадписи(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваНадписи(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",         СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",   СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ТипЭлемента", СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("Видимость",   СвойствоЭлемента(Истина));
	
	ОбщиеСвойства(Свойства);
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство      = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство      = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ДобавитьКнопку(СтруктураФормы, Имя, Заголовок, ИмяКоманды) Экспорт
	
	Тип = "Кнопка";
	
	Если Не ПроверитьЗависимости(СтруктураФормы, Тип) тогда
		ВызватьИсключение "Тип элемента " + Тип + " не допустим для текущего родителя " + СтруктураФормы.ТипЭлемента;
	КонецЕсли;	
	
	Элемент = СтруктураФормы.ПолучитьЭлементы().Добавить();
	Элемент.Идентификатор = Строка(Новый УникальныйИдентификатор);
	Элемент.Имя = ПолноеИмяЭлемента(Имя, СтруктураФормы);
	Элемент.ИмяКоманды = ИмяКоманды;	
	Элемент.Заголовок = Заголовок;
	Элемент.ТипЭлемента = Тип;	
	Элемент.НомерКартинки = СтруктураФормыКартинкаКнопка();		
	
	Свойства = СвойстваКнопки(Элемент);
	
	Элемент.Свойства = Новый ФиксированнаяСтруктура(Свойства);
	
	Возврат Элемент;
	
КонецФункции

Функция СвойстваКнопки(Элемент) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Имя",         СвойствоЭлемента(Элемент.Имя));
	Свойства.Вставить("Заголовок",   СвойствоЭлемента(Элемент.Заголовок));
	Свойства.Вставить("ИмяКоманды",  СвойствоЭлемента(Элемент.ИмяКоманды,,,,, Истина));
	Свойства.Вставить("ТипЭлемента", СвойствоЭлемента(Элемент.ТипЭлемента,, Истина));
	Свойства.Вставить("Доступность", СвойствоЭлемента(Истина));
	Свойства.Вставить("Видимость",   СвойствоЭлемента(Истина));
	
	//ОбщиеСвойства(Свойства);
	
	// Условные свойства
	Свойства.Заголовок.ЭтоУсловноеСвойство   = Истина;
	Свойства.Доступность.ЭтоУсловноеСвойство = Истина;
	Свойства.Видимость.ЭтоУсловноеСвойство   = Истина;
	
	Возврат Свойства;

КонецФункции

Функция ПолноеИмяЭлемента(Имя, Родитель) Экспорт
	
	Результат = Имя;
	
	Если Родитель.ТипЭлемента = "Таблица" тогда
		Результат = Родитель.Имя + Результат;
	КонецЕсли;	
	
	СчетчикНайденных = 0;
	
	НайденныйЭлемент = НайтиВДеревеДанныхФормы(КореньСтруктурыФормы(Родитель), Новый Структура("Имя", Результат));
	Пока НайденныйЭлемент <> Неопределено цикл
		СчетчикНайденных = СчетчикНайденных + 1;
		НайденныйЭлемент = НайтиВДеревеДанныхФормы(КореньСтруктурыФормы(Родитель), 
			Новый Структура("Имя", Результат + мдмОбщегоНазначенияКлиентСервер.ЧислоСтрока(СчетчикНайденных)));
	КонецЦикла;	
	
	Если СчетчикНайденных > 0 тогда
		Результат = Результат + мдмОбщегоНазначенияКлиентСервер.ЧислоСтрока(СчетчикНайденных)	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

Функция НайтиВДеревеДанныхФормы(Дерево, Отбор, НайтиВсе = Ложь) Экспорт
	
	РезультатПоиска = Новый Массив;
	
	НайтиВДеревеДанныхФормыРекурсивно(РезультатПоиска, Дерево, Отбор);
	
	Если НайтиВсе тогда
		Возврат РезультатПоиска;
	ИначеЕсли РезультатПоиска.Количество() тогда
		Возврат РезультатПоиска[0];
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

Процедура НайтиВДеревеДанныхФормыРекурсивно(РезультатПоиска, Дерево, Отбор)
	
	Для Каждого СтрокаДерева из Дерево.ПолучитьЭлементы() цикл
		
		Успех = Истина;
		Для Каждого КлючЗначение из Отбор цикл
			Если СтрокаДерева[КлючЗначение.Ключ] <> КлючЗначение.Значение тогда
				Успех = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Успех тогда
			РезультатПоиска.Добавить(СтрокаДерева);
		КонецЕсли;	
		
		НайтиВДеревеДанныхФормыРекурсивно(РезультатПоиска, СтрокаДерева, Отбор);
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ЗависимостьЭлементов() Экспорт
	
	Зависимости = Новый Структура;
	
	Зависимости.Вставить("Форма",           СтрРазделить("ПолеВвода,ПолеФлажка,Группа,Страницы,Надпись,Кнопка,Таблица,КоманднаяПанель", ","));
	Зависимости.Вставить("ПолеВвода",       Новый Массив);
	Зависимости.Вставить("ПолеФлажка",      Новый Массив);
	Зависимости.Вставить("Группа",          СтрРазделить("ПолеВвода,ПолеФлажка,Группа,Страницы,Надпись,Кнопка,Таблица,КоманднаяПанель", ","));
	Зависимости.Вставить("Страницы",        СтрРазделить("Страница", ","));
	Зависимости.Вставить("Страница",        СтрРазделить("ПолеВвода,ПолеФлажка,Группа,Страницы,Надпись,Кнопка,Таблица,КоманднаяПанель", ","));
	Зависимости.Вставить("Надпись",         Новый Массив);
	Зависимости.Вставить("Кнопка",          Новый Массив);
	Зависимости.Вставить("КоманднаяПанель", СтрРазделить("Кнопка", ","));
	Зависимости.Вставить("Таблица",         СтрРазделить("ПолеВвода,ПолеФлажка", ","));
	
	Возврат Зависимости;
	
КонецФункции	

Функция ТипыЭлементов(Родитель = Неопределено) Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ПолеВвода", "Поле ввода");
	Список.Добавить("ПолеФлажка", "Поле флажка");
	Список.Добавить("Группа", "Группа");
	Список.Добавить("Страницы", "Страницы");
	Список.Добавить("Страница", "Страница");
	Список.Добавить("Надпись", "Надпись");
	Список.Добавить("Кнопка", "Кнопка");
	Список.Добавить("Таблица", "Таблица");
	Список.Добавить("КоманднаяПанель", "Командная панель");
	
	Если ЗначениеЗаполнено(Родитель) тогда
		
		ЗависимыеЭлементы = ЗависимостьЭлементов()[Родитель];
		
		Для инд = -(Список.Количество()-1) по 0 цикл
			ТекущийЭлемент = Список[-инд];
			Если ЗависимыеЭлементы.Найти(ТекущийЭлемент.Значение) = Неопределено тогда
				Список.Удалить(-инд);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат Список;
	
КонецФункции	

Функция ГруппировкаПодчиненныхЭлементовФормы() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("Вертикальная");
	Список.Добавить("Горизонтальная");
	
	Возврат Список;
	
КонецФункции	

Функция ОтображениеСтраницФормы() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("ЗакладкиСверху");
	
	Возврат Список;
	
КонецФункции	

Функция СвойствоЭлемента(Значение, Список = Неопределено, ТолькоПросмотр = Ложь, ЭтоСобытие = Ложь, ЭтоСобытиеПлатформы = Ложь, ЭтоКоманда = Ложь, ЭтоУсловноеСвойство = Ложь) Экспорт
	
	Если Список = Неопределено тогда
		Список = Новый СписокЗначений;
	ИначеЕсли ТипЗнч(Список) = Тип("Строка") тогда
		ЗначениеСписка = СтрРазделить(Список, ",");
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(ЗначениеСписка);
	КонецЕсли;	
	
	Свойство = Новый Структура;
	Свойство.Вставить("Значение", Значение);
	Свойство.Вставить("Список", Список);
	Свойство.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Свойство.Вставить("КодСобытия", "");
	Свойство.Вставить("ЭтоСобытие", ЭтоСобытие);
	Свойство.Вставить("ЭтоСобытиеПлатформы", ЭтоСобытиеПлатформы);
	Свойство.Вставить("ЭтоКоманда", ЭтоКоманда);
	Свойство.Вставить("ЭтоУсловноеСвойство", ЭтоУсловноеСвойство);
	
	Возврат Свойство;
	
КонецФункции	

Функция ПроверитьВозможностьПодчинения(Родитель, Потомок) Экспорт
	
	Возврат ЗависимостьЭлементов()[Родитель].Найти(Потомок) <> Неопределено;
	
КонецФункции	

Функция СвязиПараметровВыбора(Знач Связи) Экспорт
	
	Если ТипЗнч(Связи) = Тип("Строка") И СтрНайти(Связи, ";") > 0 тогда
		
		Связи = СтрЗаменить(Связи, ";", Символы.ПС);
		
		ИмяПараметра = СтрПолучитьСтроку(Связи, 1);
		ПутьКДанным = СтрПолучитьСтроку(Связи, 2);
		
		НоваяСвязь = Новый СвязьПараметраВыбора(ИмяПараметра, ПутьКДанным);
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		
		Возврат Новый ФиксированныйМассив(НовыйМассив);
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

Функция КореньСтруктурыФормы(СтруктураФормы) Экспорт
	
	Корень = Неопределено;
	
	Если ТипЗнч(СтруктураФормы) = Тип("ДанныеФормыДерево") тогда
		Корень = СтруктураФормы.ПолучитьЭлементы()[0];
	Иначе 
		Корень = СтруктураФормы; 
		Родитель = СтруктураФормы.ПолучитьРодителя();
		Пока Родитель <> Неопределено цикл
			Корень = Родитель;
			Родитель = Родитель.ПолучитьРодителя();
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Корень;	
	
КонецФункции	

Функция ДанныеКартинкаРеквизит() Экспорт
	Возврат 2;
КонецФункции	

Функция ДанныеКартинкаТаблица() Экспорт
	Возврат 3;
КонецФункции	

Функция ОписаниеТипа(Тип, Квалификатор = Неопределено) Экспорт
	
	ОписаниеТипа = Неопределено;
	
	Если ТипЗнч(Тип) = Тип("Тип") тогда
		
		Типы = Новый Массив;
		Типы.Добавить(Тип);
		
	Иначе 
		
		Типы = Тип;
		
	КонецЕсли;	
	
	Если Типы = "Строка" тогда
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,,, Квалификатор);	
	ИначеЕсли Типы = "Число" тогда	
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,, Квалификатор);
	ИначеЕсли Типы = "Дата" тогда
		ОписаниеТипа = Новый ОписаниеТипов(Типы,,,,, Квалификатор);
	Иначе 
		ОписаниеТипа = Новый ОписаниеТипов(Типы);
	КонецЕсли;	
	
	Возврат ОписаниеТипа
	
КонецФункции	

#КонецОбласти

#Область Подсказки

Функция ПодсказкаСобытия(ИмяСобытия) Экспорт
	
	Если ИмяСобытия = "ПриСозданииНаСервере" тогда
		
		Возврат ПодсказкаПриИзмененииНаСервере();	
		
	ИначеЕсли ИмяСобытия = "ОбработкаПроверкиЗаполненияНаСервере" тогда
		
		Возврат ПодсказкаОбработкаПроверкиЗаполненияНаСервере();
		
	ИначеЕсли ИмяСобытия = "ПередЗаписью" тогда
		
		Возврат ПодсказкаПередЗаписью();
		
	ИначеЕсли ИмяСобытия = "ПередЗаписьюНаСервере" тогда
		
		Возврат ПодсказкаПередЗаписьюНаСервере();
		
	ИначеЕсли ИмяСобытия = "ПослеЗаписи" тогда
		
		Возврат ПодсказкаПослеЗаписи();
		
	ИначеЕсли ИмяСобытия = "ПриОбработкеОповещения" тогда
		
		Возврат ПодсказкаПриОбработкеОповещения();
		
	ИначеЕсли ИмяСобытия = "ПриУсловномОформленииНаСервере" тогда
		
		Возврат ПодсказкаПриУсловномОформленииНаСервере();
		
	ИначеЕсли ИмяСобытия = "ДействиеНаСервере" тогда
		
		Возврат ПодсказкаДействиеНаСервере();
		
	ИначеЕсли ИмяСобытия = "ПередЗакрытием" тогда 
		
		Возврат ПодсказкаПередЗакрытием();
		
	ИначеЕсли ИмяСобытия = "ПриИзменении" тогда
		
		Возврат ПодсказкаПриИзменении();
		
	ИначеЕсли ИмяСобытия = "ПриИзмененииНаСервере" тогда
		
		Возврат ПодсказкаПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "НачалоВыбора" тогда
		
		Возврат ПодсказкаНачалоВыбора();
		
	ИначеЕсли ИмяСобытия = "ОбработкаВыбора" тогда	
		
		Возврат ПодсказкаОбработкаВыбора();
		
	КонецЕсли;
	
КонецФункции	

Функция ПодсказкаПриСозданииНаСервере() Экспорт
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие создания формы.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Отказ</b> - Булево - отказ от создания формы.
			|	<b>СтандартнаяОбработка</b> - Булево - признак стандартного 
			|	поведения создания формы.'"));
	
КонецФункции	

Функция ПодсказкаОбработкаПроверкиЗаполненияНаСервере() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие проверки реквизитов перед записью.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Отказ</b> - Булево - отказ от создания формы.
			|	<b>ПроверяемыеРеквизиты</b> - Массив - список проверяемых реквизитов.'"));
	
КонецФункции 

Функция ПодсказкаПередЗаписью() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие перед записью формы на клиенте.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Отказ</b> - Булево - отказ от создания формы.
			|	<b>ПараметрыЗаписи</b> - Структура - параметры записи.'"));
	
КонецФункции 

Функция ПодсказкаПередЗаписьюНаСервере() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие перед записью формы на сервере.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Отказ</b> - Булево - отказ от создания формы.
			|	<b>ТекущийОбъект</b> - ЗадачаОбъект,БизнесПроцессОбъект - основной объект формы.
			|	<b>ПараметрыЗаписи</b> - Структура - параметры записи.'"));
	
КонецФункции 

Функция ПодсказкаПослеЗаписи() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие после записи формы на клиенте.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>ПараметрыЗаписи</b> - Структура - параметры записи.'"));
	
КонецФункции 

Функция ПодсказкаПриОбработкеОповещения() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Обработчик оповещения формы.</b> 
			|Его следует использовать в объекте ОписаниеОповещения.
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Результат</b> - Произвольный - возвращаемый в оповещение результат.
			|	<b>ДополнительныеПараметры</b> - Структура - параметры оповщения.'"));
	
КонецФункции 

Функция ПодсказкаПриУсловномОформленииНаСервере() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Обработчик условного оформления формы.</b> 
			|Выполняется после применения настройки условного оформления.
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Элементы</b> - ВсеЭлементыФормы - элементы текущей формы'"));
	
КонецФункции 

Функция ПодсказкаПередЗакрытием() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие перед записью формы на сервере.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Отказ</b> - Булево - отказ от создания формы.
			|	<b>ЗавершениеРаботы</b> - Булево - признак закрытия формы при завершении работы приложения.'"));
		
КонецФункции  

Функция ПодсказкаПриИзменении() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие изменения реквизита на клиенте.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Элемент</b> - ЭлементФормы - элемент изменяемого реквизита'"));
	
КонецФункции 

Функция ПодсказкаПриИзмененииНаСервере() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие изменения реквизита на сервере.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Элемент</b> - ЭлементФормы - элемент изменяемого реквизита'"));
	
КонецФункции 

Функция ПодсказкаНачалоВыбора() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие начала выбора реквизита на клиенте.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Элемент</b> - ЭлементФормы - элемент реквизита.
			|	<b>ДанныеВыбора</b> - СписокЗначений - список данных для выбора.
			|	Используется если СтандартнаяОбработка = Ложь.
			|	<b>СтандартнаяОбработка</b> - Булево - стандартная обработка события.'"));
	
КонецФункции 

Функция ПодсказкаОбработкаВыбора() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие обработки выбора реквизита на клиенте.</b>
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Элемент</b> - ЭлементФормы - элемент реквизита.
			|	<b>ВыбранноеЗначение</b> - Произвольный - выбранное значение до помещения в реквизит.
			|	<b>СтандартнаяОбработка</b> - Булево - стандартная обработка события.'"));
	
КонецФункции 

Функция ПодсказкаДействиеНаСервере() Экспорт 
	
	Возврат ФорматированнаяСтрока(
		НСтр("ru = '<b>Событие выполнения кода на сервере.</b> 
			|Вызывается из других событий программно. 
			|
			|<b>Контекст:</b>
			|	<b>Форма</b> - УправляемаяФорма - текущая форма.
			|	<b>Имя</b> - Строка - имя действия.
			|	<b>ВходныеПараметры</b> - Произвольный - значение входного параметра.
			|	<b>ВыходныеПараметры</b> - Произвольный - значение выходного параметра.
			|
			|<b>Пример вызова из других событий:</b>
			|	Реквизиты = Новый Структура(""Наименование, КПП"");
			|	ОписаниеОшибки = "";
			|	Форма.ДействиеНаСервере(""ЗаполнитьРеквизитыКонтрагентаПоИНН"", Реквизиты, ОписаниеОшибки);
			|'"));
	
КонецФункции 

Функция ФорматированнаяСтрока(Знач СтрокаСТегами) Экспорт
	
	СтрокиСВыделением = Новый СписокЗначений;
	Пока СтрНайти(СтрокаСТегами, "<b>") <> 0 Цикл
		НачалоВыделения = СтрНайти(СтрокаСТегами, "<b>");
		СтрокаДоОткрывающегоТега = Лев(СтрокаСТегами, НачалоВыделения - 1);
		СтрокиСВыделением.Добавить(СтрокаДоОткрывающегоТега);
		СтрокаПослеОткрывающегоТега = Сред(СтрокаСТегами, НачалоВыделения + 3);
		КонецВыделения = СтрНайти(СтрокаПослеОткрывающегоТега, "</b>");
		ВыделенныйФрагмент = Лев(СтрокаПослеОткрывающегоТега, КонецВыделения - 1);
		СтрокиСВыделением.Добавить(ВыделенныйФрагмент,, Истина);
		СтрокаПослеВыделения = Сред(СтрокаПослеОткрывающегоТега, КонецВыделения + 4);
		СтрокаСТегами = СтрокаПослеВыделения;
	КонецЦикла;
	СтрокиСВыделением.Добавить(СтрокаСТегами);
	
	СтрокиСоСсылками = Новый СписокЗначений;
	Для Каждого ЧастьСтроки Из СтрокиСВыделением Цикл
		
		СтрокаСТегами = ЧастьСтроки.Значение;
		
		Если ЧастьСтроки.Пометка Тогда
			СтрокиСоСсылками.Добавить(СтрокаСТегами,, Истина);
			Продолжить;
		КонецЕсли;
		
		НачалоВыделения = СтрНайти(СтрокаСТегами, "<a href = ");
		Пока НачалоВыделения <> 0 Цикл
			СтрокаДоОткрывающегоТега = Лев(СтрокаСТегами, НачалоВыделения - 1);
			СтрокиСоСсылками.Добавить(СтрокаДоОткрывающегоТега, );
			
			СтрокаПослеОткрывающегоТега = Сред(СтрокаСТегами, НачалоВыделения + 9);
			ЗакрывающийТег = СтрНайти(СтрокаПослеОткрывающегоТега, ">");
			
			Ссылка = СокрЛП(Лев(СтрокаПослеОткрывающегоТега, ЗакрывающийТег - 2));
			Если СтрНачинаетсяС(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 2, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 1, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			
			СтрокаПослеСсылки = Сред(СтрокаПослеОткрывающегоТега, ЗакрывающийТег + 1);
			КонецВыделения = СтрНайти(СтрокаПослеСсылки, "</a>");
			ТекстСсылки = Лев(СтрокаПослеСсылки, КонецВыделения - 1);
			СтрокиСоСсылками.Добавить(ТекстСсылки, Ссылка);
			
			СтрокаПослеВыделения = Сред(СтрокаПослеСсылки, КонецВыделения + 4);
			СтрокаСТегами = СтрокаПослеВыделения;
			
			НачалоВыделения = СтрНайти(СтрокаСТегами, "<a href = ");
		КонецЦикла;
		СтрокиСоСсылками.Добавить(СтрокаСТегами);
		
	КонецЦикла;
	
	МассивСтроки = Новый Массив;
	Для Каждого ЧастьСтроки Из СтрокиСоСсылками Цикл
		
		Если ЧастьСтроки.Пометка Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение, Новый Шрифт(,,Истина)));
		ИначеЕсли Не ПустаяСтрока(ЧастьСтроки.Представление) Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение,,,, ЧастьСтроки.Представление));
		Иначе
			МассивСтроки.Добавить(ЧастьСтроки.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтроки);
	
КонецФункции

#КонецОбласти

#Область СлужбеныеПроцедурыИФункции

Процедура ОбщиеСвойства(Свойства)
	
	Если Ложь Тогда 
		Свойства = Новый Структура;
	КонецЕсли;	
	
	Свойства.Вставить("Ширина", СвойствоЭлемента(0));
	Свойства.Вставить("РастягиватьПоГоризонтали", СвойствоЭлемента(Истина));
	
КонецПроцедуры

Функция ПроверитьЗависимости(СтруктураФормы, Тип) 
	
	Возврат ТипЗнч(СтруктураФормы) = Тип("ДанныеФормыДерево") ИЛИ ТипЗнч(СтруктураФормы) = Тип("ДанныеФормыЭлементДерева") И ЗависимостьЭлементов()[СтруктураФормы.ТипЭлемента].Найти(Тип) <> Неопределено;
	
КонецФункции	

Функция СтруктураФормыКартинкаКнопка()
	Возврат 0;
КонецФункции	

Функция СтруктураФормыКартинкаГруппа()
	Возврат 1;
КонецФункции	

Функция СтруктураФормыКартинкаПоле()
	Возврат 2;
КонецФункции	

Функция СтруктураФормыКартинкаТаблица()
	Возврат 3;
КонецФункции	

Функция СтруктураФормыКартинкаФорма()
	Возврат 1000; // пустая картинка
КонецФункции	

#КонецОбласти