
&НаКлиенте
Перем ИсточникПеретаскивания;
&НаКлиенте
Перем ПриемникПеретаскивания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьСтруктуруФормыИзОбъекта(СтруктураФормы, ТекущийОбъект);
	
	ЗаполнитьРеквизитыУсловногоОформления(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыУсловногоОформления(Знач ТекущийОбъект)
	
	Перем ТекущаяСтрока;
	
	Для Каждого ТекущаяСтрока из ТекущийОбъект.УсловноеОформление цикл
		Объект.УсловноеОформление[ТекущийОбъект.УсловноеОформление.Индекс(ТекущаяСтрока)].Свойства = ТекущаяСтрока.Оформление.Получить();
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДанныеФормы();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		ЗаполнитьСтруктуруФормыПоДанным();
	КонецЕсли;
	
	УстановитьОтборПодчиненныхОбъектов();
	
	ПоказатьУсловноеОформлениеВСтруктуреФормы(СтруктураФормы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СтруктураФормы.Очистить();
	
	ЗаписатьСтруктуруФормыВОбъект(ТекущийОбъект, СтруктураФормы);	
	
	СохранитьРеквизитыУсловногоОформления(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРеквизитыУсловногоОформления(Знач ТекущийОбъект)
	
	Перем ТекущаяСтрока;
	
	Для Каждого ТекущаяСтрока из Объект.УсловноеОформление цикл
		ТекущийОбъект.УсловноеОформление[Объект.УсловноеОформление.Индекс(ТекущаяСтрока)].Оформление = Новый ХранилищеЗначения(ТекущаяСтрока.Свойства);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборПодчиненныхОбъектов();
	
	ЗаполнитьРеквизитыУсловногоОформления(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеФормыДанных", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормы();
	
	СформироватьСтруктуруФормыПоУмолчанию();
	
КонецПроцедуры

#Область Свойства

&НаКлиенте
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено тогда
		Возврат
	КонецЕсли;	
	
	Элементы.СвойстваЗначение.СписокВыбора.ЗагрузитьЗначения(ДанныеСтроки.Список.ВыгрузитьЗначения());
	
	Если ДанныеСтроки.ЭтоСобытие тогда
		
		Элементы.СвойстваЗначение.КнопкаОткрытия = Истина;
		Элементы.СвойстваЗначение.КнопкаОчистки  = Истина;
		
	ИначеЕсли ДанныеСтроки.Имя = "ПутьКДанным" 
		ИЛИ ДанныеСтроки.Имя = "ИмяКоманды" 
		ИЛИ ДанныеСтроки.Имя = "УсловноеОформление" 
		ИЛИ ДанныеСтроки.Имя = "СвязиПараметровВыбора" тогда
		
		Элементы.СвойстваЗначение.КнопкаВыбора  = Истина;
		Элементы.СвойстваЗначение.КнопкаОчистки = Истина;
		
	Иначе 	
		
		Элементы.СвойстваЗначение.КнопкаОткрытия = Ложь;
		Элементы.СвойстваЗначение.КнопкаОчистки  = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Свойства.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеСтроки.Имя = "ПутьКДанным" тогда
		СтандартнаяОбработка = Ложь;
		мдмКонструкторФормыКлиент.ВыбратьПутьКДанным(Элемент, Объект.СхемаДанных);
	ИначеЕсли ДанныеСтроки.Имя = "ИмяКоманды" тогда		
		СтандартнаяОбработка = Ложь;
		мдмКонструкторФормыКлиент.ВыбратьКоманду(Элемент, Объект.Ссылка);
	ИначеЕсли ДанныеСтроки.Имя = "УсловноеОформление" тогда		
		СтандартнаяОбработка = Ложь;
		мдмКонструкторФормыКлиент.ВыбратьУсловноеОформление(Элемент, Объект.Ссылка);
	ИначеЕсли ДанныеСтроки.Имя = "СвязиПараметровВыбора" тогда			
		СтандартнаяОбработка = Ложь;
		мдмКонструкторФормыКлиент.ВыбратьСвязиПараметровВыбора(Элемент, ДанныеСтроки.Значение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущееСвойство = Элементы.Свойства.ТекущиеДанные;
	Если ТекущееСвойство = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущееСвойство.Значение) ИЛИ Не ЗначениеЗаполнено(ТекущееСвойство.Имя) тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийЭлементСтруктурыФормы = Элементы.СтруктураФормы.ТекущиеДанные;
	Если ТекущийЭлементСтруктурыФормы = Неопределено тогда
		Возврат
	КонецЕсли;
	
	Если ТекущийЭлементСтруктурыФормы.Свойства[ТекущееСвойство.Имя].ЭтоСобытие тогда
		СтандартнаяОбработка = Ложь;
		НачатьРедактированиеМодуля();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПриИзменении(Элемент)
	
	ТекущееСвойство = Элемент.ТекущиеДанные;
	Если ТекущееСвойство = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	ТекущийЭлементСтруктурыФормы = Элементы.СтруктураФормы.ТекущиеДанные;
	Если ТекущийЭлементСтруктурыФормы = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ПриИзмененииСвойств(ТекущееСвойство, ТекущийЭлементСтруктурыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСвойств(ТекущиеСвойства, ТекущийЭлементСтруктурыФормы)
	
	Если ТекущиеСвойства.Имя = "Имя" тогда
		ТекущийЭлементСтруктурыФормы.Имя = ТекущиеСвойства.Значение;
	ИначеЕсли ТекущиеСвойства.Имя = "Заголовок" тогда	
		ТекущийЭлементСтруктурыФормы.Заголовок = ТекущиеСвойства.Значение;
	ИначеЕсли ТекущиеСвойства.Имя = "ПутьКДанным" тогда	
		ТекущийЭлементСтруктурыФормы.ПутьКДанным = ТекущиеСвойства.Значение;
	ИначеЕсли ТекущиеСвойства.Имя = "УсловноеОформление" тогда	
		ТекущийЭлементСтруктурыФормы.УсловноеОформление = ТекущиеСвойства.Значение;
	КонецЕсли;
	
	СтруктураСвойств = Новый Структура(ТекущийЭлементСтруктурыФормы.Свойства);
	СтруктураСвойств[ТекущиеСвойства.Имя].Значение = ТекущиеСвойства.Значение;
	Если ТекущиеСвойства.ЭтоСобытие тогда
		СтруктураСвойств[ТекущиеСвойства.Имя].КодСобытия = ТекущиеСвойства.КодСобытия;
	Иначе 
		СтруктураСвойств[ТекущиеСвойства.Имя].КодСобытия = "";
	КонецЕсли;	
	
	ТекущийЭлементСтруктурыФормы.Свойства = Новый ФиксированнаяСтруктура(СтруктураСвойств);
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеФормы

&НаКлиенте
Процедура ДанныеФормыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Ссылка) тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущаяСтрока", ДанныеСтроки.ПолучитьИдентификатор());
	
	Оповещение = Новый ОписаниеОповещения("ДанныеФормыВыборОповещение", ЭтотОбъект, ПараметрыОповещения);
	
	ИмяФормыРеквизита = мдмОбщегоНазначенияВызовСервера.ПолноеИмяМетаданных(ДанныеСтроки.Ссылка) + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Ссылка);
	
	ОткрытьФорму(ИмяФормыРеквизита, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыВыборОповещение(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьРеквизитДанныхФормы(ПараметрыОповещения.ТекущаяСтрока);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьРеквизитДанныхФормы(ТекущаяСтрока)
	
	ДанныеСтроки = ДанныеФормы.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ДанныеСтроки = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
	Если РеквизитОбъект = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоТабличнаяЧасть = ТипЗнч(ДанныеСтроки.Ссылка) = Тип("СправочникСсылка.мдмТабличныеЧасти");
	
	СтарыйПутьКДанным = ДанныеСтроки.Имя;
	
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	Если Родитель <> Неопределено тогда
		СтарыйПутьКДанным = Родитель.Имя + "." + ДанныеСтроки.Имя;
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, РеквизитОбъект, "Имя,Синоним");
	Если Не ЭтоТабличнаяЧасть тогда
		ДанныеСтроки.Тип = РеквизитОбъект.Тип.Получить();
		ДанныеСтроки.ТипПредставление = РеквизитОбъект.ТипПредставление;
	КонецЕсли;	
	
	НайденныеЭлементы = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(СтруктураФормы, Новый Структура("ПутьКДанным", СтарыйПутьКДанным), Истина);	
	Для Каждого НайденныйЭлемент из НайденныеЭлементы цикл
		
		НовыйПутьКДанным = ДанныеСтроки.Имя;
		
		Если Родитель <> Неопределено тогда
			НовыйПутьКДанным = Родитель.Имя + "." + ДанныеСтроки.Имя;
		КонецЕсли;	
		
		НайденныйЭлемент.ПутьКДанным = НовыйПутьКДанным;
		СтруктураСвойств = Новый Структура(НайденныйЭлемент.Свойства);
		СтруктураСвойств.ПутьКДанным.Значение = НайденныйЭлемент.ПутьКДанным;
		НайденныйЭлемент.Свойства = Новый ФиксированнаяСтруктура(СтруктураСвойств);
		
		Если ЭтоТабличнаяЧасть тогда
			ВложенныеЭлементы = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(НайденныйЭлемент, Новый Структура, Истина);	
			Для Каждого ПодчиненныйЭлемент из ВложенныеЭлементы цикл
				Если Не ЗначениеЗаполнено(ПодчиненныйЭлемент.ПутьКДанным) тогда
					Продолжить;
				КонецЕсли;	
				
				ПодчиненныйЭлемент.ПутьКДанным = СтрЗаменить(ПодчиненныйЭлемент.ПутьКДанным, СтарыйПутьКДанным + ".", НовыйПутьКДанным + ".");
				СтруктураСвойств = Новый Структура(ПодчиненныйЭлемент.Свойства);
				СтруктураСвойств.ПутьКДанным.Значение = ПодчиненныйЭлемент.ПутьКДанным;
				ПодчиненныйЭлемент.Свойства = Новый ФиксированнаяСтруктура(СтруктураСвойств);
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДанныеФормыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элемент;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФормыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураФормы

&НаКлиенте
Процедура СтруктураФормыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииЭлементаФормы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЭлементаФормы() Экспорт
	
	ЗаполнитьСвойства();
	
	Оформление.Очистить();
	
	ДанныеСтроки = Элементы.СтруктураФормы.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Имя) тогда
		Элементы.УсловноеОформление.ОтборСтрок = Новый ФиксированнаяСтруктура("ИмяЭлемента", ДанныеСтроки.Имя);
	Иначе 
		Элементы.УсловноеОформление.ОтборСтрок = Новый ФиксированнаяСтруктура("ИмяЭлемента", NULL);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ПутьКДанным) тогда
		Элементы.УсловнаяОбязательность.ОтборСтрок = Новый ФиксированнаяСтруктура("ПутьКДанным", ДанныеСтроки.ПутьКДанным);
	Иначе 
		Элементы.УсловнаяОбязательность.ОтборСтрок = Новый ФиксированнаяСтруктура("ПутьКДанным", NULL);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСвойства() 
	
	ЭлементСтруктурыФормы = Элементы.СтруктураФормы.ТекущиеДанные;
	Если ЭлементСтруктурыФормы = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Свойства.ТекущиеДанные <> Неопределено тогда
		СвойствоДоОбновления = Элементы.Свойства.ТекущиеДанные.Имя;	
	КонецЕсли;	
	
	Свойства.Очистить();
	
	СвойстваЭлемента = мдмКонструкторФормыКлиентСервер.СвойстваЭлементаСтруктурыФормы(ЭлементСтруктурыФормы);
	
	СписокВыбора = Неопределено; ПутьКДанным  = Неопределено;
	Если СвойстваЭлемента.Свойство("СписокВыбора", СписокВыбора) И СвойстваЭлемента.Свойство("ПутьКДанным", ПутьКДанным) тогда
		УстановитьТипЗначенияСвойстваСписокВыбора(СписокВыбора.Значение, ПутьКДанным.Значение);
	КонецЕсли;	
	
	Для Каждого КлючЗначение из СвойстваЭлемента цикл
		
		ЗначениеСвойства = КлючЗначение.Значение;
		
		НоваяСтрока = Свойства.Добавить();
		НоваяСтрока.Имя = КлючЗначение.Ключ;
		НоваяСтрока.Значение = ЗначениеСвойства.Значение;
		НоваяСтрока.Список = ЗначениеСвойства.Список;
		НоваяСтрока.ТолькоПросмотр = ЗначениеСвойства.ТолькоПросмотр;
		НоваяСтрока.КодСобытия = ЗначениеСвойства.КодСобытия;
		НоваяСтрока.ЭтоСобытие = ЗначениеСвойства.ЭтоСобытие;
		
	КонецЦикла;	
	
	ЭлементСтруктурыФормы.Свойства = Новый ФиксированнаяСтруктура(СвойстваЭлемента);	
	
	Если СвойствоДоОбновления <> Неопределено тогда
		НайденноеСвойство = Свойства.НайтиСтроки(Новый Структура("Имя", СвойствоДоОбновления));
		Если НайденноеСвойство.Количество() тогда
			Элементы.Свойства.ТекущаяСтрока = НайденноеСвойство[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТипЗначенияСвойстваСписокВыбора(СписокВыбора, Знач ПутьКДанным)
	
	Перем Реквизит;
	
	ПутьКДанным = СтрРазделить(ПутьКДанным, ".");
	
	Если ПутьКДанным.Количество() = 1 тогда
		Реквизит = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(ДанныеФормы, Новый Структура("Имя", ПутьКДанным[0]));
	ИначеЕсли ПутьКДанным.Количество() = 2 тогда	
		Реквизит = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(ДанныеФормы, Новый Структура("Имя", ПутьКДанным[0]));
		Если Реквизит <> Неопределено тогда
			Реквизит = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(Реквизит,    Новый Структура("Имя", ПутьКДанным[1]));
		КонецЕсли;	
	КонецЕсли;	
	
	Если Реквизит = Неопределено тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	мдмРеквизиты.Тип КАК Тип
			|ИЗ
			|	Справочник.мдмРеквизиты КАК мдмРеквизиты
			|ГДЕ
			|	мдмРеквизиты.Имя = &Имя
			|	И мдмРеквизиты.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
		Запрос.УстановитьПараметр("Имя", ПутьКДанным[0]);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() тогда
			Выборка = РезультатЗапроса.Выбрать();		
			Выборка.Следующий();
			СписокВыбора.ТипЗначения = Выборка.Тип.Получить();
		КонецЕсли;	
		
	Иначе 
		
		СписокВыбора.ТипЗначения = Реквизит.Тип;	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СтруктураФормыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СтруктураФормыИмяЭлемента" тогда
		Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаСвойстваЭлемента;
	ИначеЕсли Поле.Имя = "СтруктураФормыПутьКДанным" тогда	
		Успех = НайтиВДанныхФормы(Элемент.ТекущиеДанные.ПутьКДанным);
		Если Успех тогда
			Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаДанные;
		Иначе 	
			Успех = НайтиВРеквизитахФормы(Элемент.ТекущиеДанные.ПутьКДанным);
			Если Успех тогда
				Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаРеквизитыФормы;
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли Поле.Имя = "СтруктураФормыОформление" И Элемент.ТекущиеДанные.УсловноеПоведение тогда		
		Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаУсловноеПоведение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция НайтиВДанныхФормы(ПутьКДанным)
	
	Успех = Ложь;
	
	Если ЗначениеЗаполнено(ПутьКДанным) тогда
		ЧастиПути = СтрРазделить(ПутьКДанным, ".");
		
		Если ЧастиПути.Количество() > 1 тогда
			Отбор = Новый Структура("Имя", ЧастиПути[0]);
			Родитель = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(ДанныеФормы, Отбор);
		Иначе 				
			Родитель = ДанныеФормы;
		КонецЕсли;	
		
		Если Родитель <> Неопределено тогда
			Отбор = Новый Структура("Имя", ЧастиПути[ЧастиПути.ВГраница()]);
			НайденнаяСтрока = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(Родитель, Отбор);	
			Если НайденнаяСтрока <> Неопределено тогда
				Элементы.ДанныеФормы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				Успех = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

	Возврат Успех;
	
КонецФункции

&НаКлиенте
Функция НайтиВРеквизитахФормы(ПутьКДанным)
	
	Успех = Ложь;
	
	Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Объект.Ссылка) тогда
		НайденнаяСтрока = РеквизитФормыПоИмени(ПутьКДанным, Объект.Ссылка);	
		Если НайденнаяСтрока <> Неопределено тогда
			Элементы.РеквизитыФормы.ТекущаяСтрока = НайденнаяСтрока;
			Успех = Истина;
		КонецЕсли;	
	КонецЕсли;

	Возврат Успех;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитФормыПоИмени(Имя, Владелец)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	мдмРеквизиты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.мдмРеквизиты КАК мдмРеквизиты
		|ГДЕ
		|	мдмРеквизиты.Владелец = &Владелец
		|	И мдмРеквизиты.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Имя", Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура СтруктураФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Родитель", ДанныеСтроки);
	
	Оповещение = Новый ОписаниеОповещения(
		"СтруктураФормыПередНачаломДобавленияЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ДопустимыеТипыЭлементов = мдмКонструкторФормыКлиентСервер.ТипыЭлементов(ДанныеСтроки.ТипЭлемента);	
	
	Если ДопустимыеТипыЭлементов.Количество() тогда
		ПоказатьВыборИзСписка(
			Оповещение,
			ДопустимыеТипыЭлементов, 
			Элементы.СтруктураФормы);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФормыПередНачаломДобавленияЗавершение(Результат, ДополнительныеЗначения) Экспорт
	
	Перем Элемент;
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	Если мдмКонструкторФормыКлиентСервер.ПроверитьВозможностьПодчинения(ДополнительныеЗначения.Родитель.ТипЭлемента, Результат.Значение) тогда
		
		Элемент = мдмКонструкторФормыКлиентСервер.ДобавитьЭлементФормы(
			ДополнительныеЗначения.Родитель, 
			Результат.Значение,, 
			Результат.Значение);
			
		Элементы.СтруктураФормы.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		
		Модифицированность = Истина;
		
	ИначеЕсли мдмКонструкторФормыКлиентСервер.ПроверитьВозможностьПодчинения("Форма", Результат.Значение) тогда
		
		Элемент = мдмКонструкторФормыКлиентСервер.ДобавитьЭлементФормы(
			мдмКонструкторФормыКлиентСервер.КореньСтруктурыФормы(СтруктураФормы), 
			Результат.Значение,, 
			Результат.Значение);
			
		Элементы.СтруктураФормы.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
	Если Элемент <> Неопределено тогда
		Элементы.СтруктураФормы.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СтруктураФормыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФормыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
	Если ИсточникПеретаскивания = Неопределено ИЛИ Строка = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаПриемник = СтруктураФормы.НайтиПоИдентификатору(Строка);
	СтрокаИсточник = ИсточникПеретаскивания.ТекущиеДанные;
	
	Если ИсточникПеретаскивания = Неопределено ИЛИ СтрокаПриемник = Неопределено тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;	
		
	ИначеЕсли ИсточникПеретаскивания.Имя = "СтруктураФормы" 
		И мдмКонструкторФормыКлиентСервер.ПроверитьВозможностьПодчинения(СтрокаПриемник.ТипЭлемента, СтрокаИсточник.ТипЭлемента) тогда
		
		РодительИсточникаТаблица = ПолучитьРодителяТаблицу(СтрокаИсточник);
		ИсточникЭтоТаблица = РодительИсточникаТаблица <> Неопределено;
		
		РодительПриемникаТаблица = ПолучитьРодителяТаблицу(СтрокаПриемник);
		ПриемникЭтоТаблица = РодительПриемникаТаблица <> Неопределено;
		
		Если ПриемникЭтоТаблица И ИсточникЭтоТаблица И РодительПриемникаТаблица.ПутьКДанным = РодительИсточникаТаблица.ПутьКДанным тогда
		
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
			
		ИначеЕсли Не ПриемникЭтоТаблица И Не ИсточникЭтоТаблица  тогда
			                 
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
			
		КонецЕсли;	
		
	ИначеЕсли ИсточникПеретаскивания.Имя = "ДанныеФормы"
		И мдмКонструкторФормыКлиентСервер.ПроверитьВозможностьПодчинения(СтрокаПриемник.ТипЭлемента, ТипЭлементаДанныхФормы(СтрокаИсточник)) тогда
		
		РодительИсточника = СтрокаИсточник.ПолучитьРодителя();
		Если РодительИсточника = Неопределено тогда
			ИмяРодителяИсточника = "";
		Иначе 
			ИмяРодителяИсточника = РодительИсточника.Имя;
		КонецЕсли;	
		
		РодительПриемникаТаблица = ПолучитьРодителяТаблицу(СтрокаПриемник);
		ПриемникЭтоТаблица = РодительПриемникаТаблица <> Неопределено;
		
		Если ПриемникЭтоТаблица И ЗначениеЗаполнено(ИмяРодителяИсточника) И РодительПриемникаТаблица.ПутьКДанным = ИмяРодителяИсточника тогда
		
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
			
		ИначеЕсли Не ПриемникЭтоТаблица И Не ЗначениеЗаполнено(ИмяРодителяИсточника) тогда
			
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
			
		КонецЕсли;	
		
	ИначеЕсли ИсточникПеретаскивания.Имя = "РеквизитыФормы" 
		И мдмКонструкторФормыКлиентСервер.ПроверитьВозможностьПодчинения(СтрокаПриемник.ТипЭлемента, ТипЭлементаРеквизитаФормы(СтрокаИсточник)) тогда
		
		РодительПриемникаТаблица = ПолучитьРодителяТаблицу(СтрокаПриемник);
		ПриемникЭтоТаблица = РодительПриемникаТаблица <> Неопределено;
		
		Если Не ПриемникЭтоТаблица тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;	
		КонецЕсли;	
		
	ИначеЕсли ИсточникПеретаскивания.Имя = "КомандыФормы" 
		И мдмКонструкторФормыКлиентСервер.ПроверитьВозможностьПодчинения(СтрокаПриемник.ТипЭлемента, "Кнопка") тогда
		
		РодительПриемникаТаблица = ПолучитьРодителяТаблицу(СтрокаПриемник);
		ПриемникЭтоТаблица = РодительПриемникаТаблица <> Неопределено;
		
		Если Не ПриемникЭтоТаблица тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;	
		КонецЕсли;	
		
	ИначеЕсли ИсточникПеретаскивания.Имя = "УсловияФормы" тогда 
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;	
		
	КонецЕсли;	
	
	ПриемникПеретаскивания = СтрокаПриемник;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФормыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаИсточник = ИсточникПеретаскивания.ТекущиеДанные;
	СтрокаПриемник = СтруктураФормы.НайтиПоИдентификатору(Строка);
	
	Если ИсточникПеретаскивания.Имя = "ДанныеФормы" тогда
		СкопироватьРекурсивноИзДанныхФормы(СтрокаПриемник, СтрокаИсточник);
	ИначеЕсли ИсточникПеретаскивания.Имя = "РеквизитыФормы" тогда
		мдмКонструкторФормыКлиентСервер.ДобавитьЭлементФормы(СтрокаПриемник, СтрокаИсточник.Имя, СтрокаИсточник.Синоним, ТипЭлементаРеквизитаФормы(СтрокаИсточник), СтрокаИсточник.Имя);
	ИначеЕсли ИсточникПеретаскивания.Имя = "КомандыФормы" тогда
		мдмКонструкторФормыКлиентСервер.ДобавитьЭлементФормы(СтрокаПриемник, СтрокаИсточник.Имя, СтрокаИсточник.Заголовок, "Кнопка",, СтрокаИсточник.Имя);
	ИначеЕсли ИсточникПеретаскивания.Имя = "СтруктураФормы" тогда	
		СкопироватьРекурсивноИзСтруктурыФормы(СтрокаПриемник, СтрокаИсточник);
		СтрокаИсточник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаИсточник);
	ИначеЕсли ИсточникПеретаскивания.Имя = "УсловноеОформлениеФормы" тогда		
		СтрокаПриемник.УсловноеОформление = СтрокаИсточник.Ссылка;
	КонецЕсли;
	
	Элементы.СтруктураФормы.Развернуть(СтрокаПриемник.ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФормыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ТекущийЭлемент <> Неопределено И ТекущийЭлемент.Имя = "Модуль" тогда
		
		ТекущийЭлемент.ВыделенныйТекст = ПараметрыПеретаскивания.Значение.Имя;	
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыФормы

&НаКлиенте
Процедура РеквизитыФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		ПоказатьПредупреждение(,"Перед добавлением необходимо выполнить запись.");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыФормыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элемент;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыФормыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура КомандыФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		ПоказатьПредупреждение(,"Перед добавлением необходимо выполнить запись.");
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыФормыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элемент;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыФормыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаКлиенте
Процедура УсловноеОформлениеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элемент;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииУсловногоОформления", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииУсловногоОформления() Экспорт
	
	ТекущееУсловие = Элементы.УсловноеОформление.ТекущиеДанные;
	Если ТекущееУсловие = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	ЭлементФормы = Элементы.СтруктураФормы.ТекущиеДанные;
	Если ЭлементФормы = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	Оформление.Очистить();
	
	Если Не ЗначениеЗаполнено(ТекущееУсловие.Условие) тогда
		Возврат;
	КонецЕсли;	
	
	ОформляемыеСвойства = мдмКонструкторФормыКлиентСервер.ОформляемыеСвойства(ЭлементФормы);
	
	Если ТекущееУсловие.Свойства = Неопределено тогда
		ТекущееУсловие.Свойства = Новый ФиксированнаяСтруктура;
	КонецЕсли;	
	
	Для Каждого КлючЗначение из ОформляемыеСвойства цикл
		
		НоваяСтрока = Оформление.Добавить();
		НоваяСтрока.Имя = КлючЗначение.Ключ;
		
		Если ТекущееУсловие.Свойства.Свойство(НоваяСтрока.Имя, НоваяСтрока.Значение) тогда
			НоваяСтрока.Использовать = Истина;
		Иначе 	
			НоваяСтрока.Значение = КлючЗначение.Значение;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УсловноеОформлениеПриИзменении(Элемент)
	
	ПоказатьУсловноеОформлениеВСтруктуреФормы(СтруктураФормы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеУсловиеПриИзменении(Элемент)
	
	ПриАктивизацииУсловногоОформления();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока тогда
		
		ЭлементФормы = Элементы.СтруктураФормы.ТекущиеДанные;
		Если ЭлементФормы = Неопределено тогда
			Возврат;
		КонецЕсли;	

		Элемент.ТекущиеДанные.ИмяЭлемента = ЭлементФормы.Имя;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область УсловнаяОбязательность

&НаКлиенте
Процедура УсловнаяОбязательностьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ЭлементФормы = Элементы.СтруктураФормы.ТекущиеДанные;
	
	Если ЭлементФормы = Неопределено ИЛИ Не ЗначениеЗаполнено(ЭлементФормы.ПутьКДанным) тогда
		
		Отказ = Истина;
		
		ПоказатьПредупреждение(, "Условная обязательность может быть настроена только для элементов, связанных с данными.");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяОбязательностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока тогда
		
		ЭлементФормы = Элементы.СтруктураФормы.ТекущиеДанные;
		Если ЭлементФормы = Неопределено тогда
			Возврат;
		КонецЕсли;	

		Элемент.ТекущиеДанные.ПутьКДанным = ЭлементФормы.ПутьКДанным;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УсловнаяОбязательностьПриИзменении(Элемент)
	
	ПоказатьУсловноеОформлениеВСтруктуреФормы(СтруктураФормы, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область УсловнаяОбязательность

&НаКлиенте
Процедура ОформлениеПриИзменении(Элемент)
	
	ТекущееУсловие = Элементы.УсловноеОформление.ТекущиеДанные;
	Если ТекущееУсловие = Неопределено тогда
		Возврат;
	КонецЕсли;	

	ОформляемыеСвойства = Новый Структура;
	Для Каждого Свойство из Оформление цикл
		Если Свойство.Использовать тогда
			ОформляемыеСвойства.Вставить(Свойство.Имя, Свойство.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	ТекущееУсловие.Свойства = Новый ФиксированнаяСтруктура(ОформляемыеСвойства);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СвойстваЭлемента(Команда)
	
	Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаСвойстваЭлемента;

КонецПроцедуры

&НаКлиенте
Процедура УсловноеПоведение(Команда)
	
	Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаУсловноеПоведение;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияМодуля(Команда)
	
	Перем ИдентификаторТекущегоСвойства;
	
	ТекущийЭлементСтруктурыФормы = мдмКонструкторФормыКлиентСервер
		.НайтиВДеревеДанныхФормы(СтруктураФормы, Новый Структура("Имя", МодульИмяЭлемента));
		
	Если ТекущийЭлементСтруктурыФормы <> Неопределено тогда
		
		Элементы.СтруктураФормы.ТекущаяСтрока = ТекущийЭлементСтруктурыФормы.ПолучитьИдентификатор();
		
		ЗаполнитьСвойства();
		
		ТекущееСвойство = Свойства.НайтиСтроки(Новый Структура("Имя", МодульИмяСобытия));
		Если ТекущееСвойство.Количество() тогда
			ТекущееСвойство[0].КодСобытия = Модуль;
			ПриИзмененииСвойств(ТекущееСвойство[0], ТекущийЭлементСтруктурыФормы);
			ИдентификаторТекущегоСвойства = ТекущееСвойство[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗакончитьРедактированиеМодуля(ИдентификаторТекущегоСвойства);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияМодуля(Команда)
	
	Перем ИдентификаторТекущегоСвойства;
	
	НайденноеСвойство = Свойства.НайтиСтроки(Новый Структура("Имя", МодульИмяСобытия));
	Если НайденноеСвойство.Количество() тогда
		ИдентификаторТекущегоСвойства = НайденноеСвойство[0].ПолучитьИдентификатор();
	КонецЕсли;	
	
	ЗакончитьРедактированиеМодуля(ИдентификаторТекущегоСвойства);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФорму(Команда)
	
	Если Модифицированность тогда
		ПоказатьПредупреждение(, "Сохраните изменения перед проверкой.");
		Возврат;
	КонецЕсли;	
	
	мдмКонструкторФормыКлиент.ПроверитьФорму(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураФормыПоУмолчанию(Команда)
	
	СтруктураФормы.ПолучитьЭлементы().Очистить();
	
	СформироватьСтруктуруФормыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЭлементуФормы(Команда)
	
	Если ТекущийЭлемент = Элементы.ДанныеФормы тогда
		
		ДанныеСтроки = Элементы.ДанныеФормы.ТекущиеДанные;
		
		Родитель = ДанныеСтроки.ПолучитьРодителя();
		Если Родитель <> Неопределено тогда
			ПутьКДанным = Родитель.Имя + "." + ДанныеСтроки.Имя;
		Иначе 
			ПутьКДанным = ДанныеСтроки.Имя;
		КонецЕсли;	
		
		Элементы.СтруктураФормы.ВыделенныеСтроки.Очистить();
		
		НайденныеСтроки = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(СтруктураФормы, Новый Структура("ПутьКДанным", ПутьКДанным), Истина);
		Для Каждого НайденнаяСтрока из НайденныеСтроки цикл
			Элементы.СтруктураФормы.ВыделенныеСтроки.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЦикла;	
		
	ИначеЕсли ТекущийЭлемент = Элементы.РеквизитыФормы тогда
		
		ДанныеСтроки = Элементы.РеквизитыФормы.ТекущиеДанные;
		
		Элементы.СтруктураФормы.ВыделенныеСтроки.Очистить();
		
		НайденныеСтроки = мдмКонструкторФормыКлиентСервер.НайтиВДеревеДанныхФормы(СтруктураФормы, Новый Структура("ПутьКДанным", ДанныеСтроки.Имя), Истина);
		Для Каждого НайденнаяСтрока из НайденныеСтроки цикл
			Элементы.СтруктураФормы.ВыделенныеСтроки.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если Элементы.СтруктураФормы.ВыделенныеСтроки.Количество() тогда
		Элементы.СтруктураФормы.ТекущаяСтрока = Элементы.СтруктураФормы.ВыделенныеСтроки[0];	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСохранение

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	ДанныеФормы.ПолучитьЭлементы().Очистить();
	
	Объект.СхемаДанных = Объект.Владелец.СхемаДанных;
	
	МетаданныеОбъекта = мдмКэшируемыеФункции.МетаданныеОбъекта(Объект.СхемаДанных, мдмМетаданные.ВерсияМетаданных());	
	
	Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты цикл
		
		СвойстваРеквизита = Реквизит.Значение;
		
		СтрокаРеквизит = ДанныеФормы.ПолучитьЭлементы().Добавить();
		СтрокаРеквизит.Имя = СвойстваРеквизита.Имя;
		СтрокаРеквизит.Тип = СвойстваРеквизита.Тип;
		СтрокаРеквизит.ТипПредставление = СвойстваРеквизита.ТипПредставление;
		СтрокаРеквизит.Синоним = СвойстваРеквизита.Синоним;		
		СтрокаРеквизит.НомерКартинки = мдмКонструкторФормыКлиентСервер.ДанныеКартинкаРеквизит();
		СтрокаРеквизит.Ссылка = Реквизит.Ключ;
		
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть из МетаданныеОбъекта.ТабличныеЧасти цикл
		
		СвойстваТабличнойЧасти = ТабличнаяЧасть.Значение;
		
		СтрокаТабличнаяЧасть = ДанныеФормы.ПолучитьЭлементы().Добавить();
		СтрокаТабличнаяЧасть.Имя = СвойстваТабличнойЧасти.Имя;
		СтрокаТабличнаяЧасть.НомерКартинки = мдмКонструкторФормыКлиентСервер.ДанныеКартинкаТаблица();
		СтрокаТабличнаяЧасть.ЭтоТаблица = Истина;
		СтрокаТабличнаяЧасть.Синоним = СвойстваТабличнойЧасти.Синоним;		
		СтрокаТабличнаяЧасть.Ссылка = ТабличнаяЧасть.Ключ;
		
		Для Каждого Реквизит из СвойстваТабличнойЧасти.Реквизиты цикл
			
			СвойстваРеквизита = Реквизит.Значение;
			
			СтрокаРеквизит = СтрокаТабличнаяЧасть.ПолучитьЭлементы().Добавить();
			СтрокаРеквизит.Имя = СвойстваРеквизита.Имя;
			СтрокаРеквизит.Тип = СвойстваРеквизита.Тип;
			СтрокаРеквизит.ТипПредставление = СвойстваРеквизита.ТипПредставление;
			СтрокаРеквизит.Синоним = СвойстваРеквизита.Синоним;		
			СтрокаРеквизит.НомерКартинки = мдмКонструкторФормыКлиентСервер.ДанныеКартинкаРеквизит();
			СтрокаРеквизит.Ссылка = Реквизит.Ключ;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СформироватьСтруктуруФормыПоУмолчанию() 
	
	ЗаполнитьСтруктуруФормыПоДанным();
	
	ПоказатьУсловноеОформлениеВСтруктуреФормы(СтруктураФормы, Объект);
	
	Элементы.СтруктураФормы.Развернуть(
		мдмКонструкторФормыКлиентСервер.КореньСтруктурыФормы(СтруктураФормы).ПолучитьИдентификатор(), Истина);

КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтруктуруФормыПоДанным()
	
	Если СтруктураФормы.ПолучитьЭлементы().Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.СхемаДанных = Объект.Владелец.СхемаДанных;
	
	МетаданныеОбъекта = мдмКэшируемыеФункции.МетаданныеОбъекта(Объект.СхемаДанных, мдмМетаданные.ВерсияМетаданных());	
	
	Форма = мдмКонструкторФормыКлиентСервер.ДобавитьФорму(СтруктураФормы);
	
	Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты цикл
		
		СвойстваРеквизита = Реквизит.Значение;
		
		Если СвойстваРеквизита.Тип.Типы()[0] = Тип("Булево") тогда
			мдмКонструкторФормыКлиентСервер.ДобавитьПолеФлажка(Форма, СвойстваРеквизита.Имя, СвойстваРеквизита.Синоним, СвойстваРеквизита.Имя);
		Иначе
			мдмКонструкторФормыКлиентСервер.ДобавитьПолеВвода(Форма, СвойстваРеквизита.Имя, СвойстваРеквизита.Синоним, СвойстваРеквизита.Имя);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если МетаданныеОбъекта.ТабличныеЧасти.Количество() тогда
		
		СтрокаГруппаСтраницы = мдмКонструкторФормыКлиентСервер.ДобавитьСтраницы(Форма, "ГруппаСтраницы", "Страницы");
		
	КонецЕсли;	
	
	Для Каждого ТабличнаяЧасть из МетаданныеОбъекта.ТабличныеЧасти цикл
		
		СвойстваТабличнойЧасти = ТабличнаяЧасть.Значение;
		
		СтрокаГруппаСтраница = мдмКонструкторФормыКлиентСервер.ДобавитьСтраницу(СтрокаГруппаСтраницы, "Страница" + СвойстваТабличнойЧасти.Имя, СвойстваТабличнойЧасти.Синоним);
		
		СтрокаТаблица = мдмКонструкторФормыКлиентСервер.ДобавитьТаблицу(СтрокаГруппаСтраница, СвойстваТабличнойЧасти.Имя, СвойстваТабличнойЧасти.Синоним, СвойстваТабличнойЧасти.Имя); 
		
		Для Каждого Реквизит из СвойстваТабличнойЧасти.Реквизиты цикл
			
			СвойстваРеквизита = Реквизит.Значение;
			
			Если СвойстваРеквизита.Тип.Типы()[0] = Тип("Булево") тогда
				мдмКонструкторФормыКлиентСервер.ДобавитьПолеФлажка(
					СтрокаТаблица, 
					СвойстваРеквизита.Имя, 
					СвойстваРеквизита.Синоним, 
					СвойстваТабличнойЧасти.Имя + "." + СвойстваРеквизита.Имя);
			Иначе
				мдмКонструкторФормыКлиентСервер.ДобавитьПолеВвода(
					СтрокаТаблица, 
					СвойстваРеквизита.Имя, 
					СвойстваРеквизита.Синоним, 
					СвойстваТабличнойЧасти.Имя + "." + СвойстваРеквизита.Имя);
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьСтруктуруФормыВОбъект(ТекущийОбъект, Дерево)
	
	Для Каждого СтрокаДерева из Дерево.ПолучитьЭлементы() цикл
		
		ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		
		СтрокаТаблицы = ТекущийОбъект.СтруктураФормы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева,, "Свойства");
		Если ТекущийРодитель <> Неопределено тогда
			СтрокаТаблицы.Родитель = ТекущийРодитель.Идентификатор;
		КонецЕсли;	
		СтрокаТаблицы.Свойства = Новый ХранилищеЗначения(СтрокаДерева.Свойства);
		
		ЗаписатьСтруктуруФормыВОбъект(ТекущийОбъект, СтрокаДерева);
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьСтруктуруФормыИзОбъекта(Дерево = Неопределено, ТекущийОбъект = Неопределено, ТекущийРодитель = "")
	
	Если Дерево = Неопределено тогда
		Дерево = СтруктураФормы;
	КонецЕсли;	
	
	Если ТекущийОбъект = Неопределено тогда
		ТекущийОбъект = Объект;
	КонецЕсли;	
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	СтрокиТаблицы = ТекущийОбъект.СтруктураФормы.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));	
	
	Для Каждого СтрокаТаблицы из СтрокиТаблицы цикл
		
		СтрокаДерева = Дерево.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы,, "Свойства");
		СтрокаДерева.Свойства = СтрокаТаблицы.Свойства.Получить();
		
		ПрочитатьСтруктуруФормыИзОбъекта(СтрокаДерева, ТекущийОбъект, СтрокаТаблицы.Идентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьУсловноеОформлениеВСтруктуреФормы(Дерево, Объект)
	
	Для Каждого Элемент из Дерево.ПолучитьЭлементы() цикл
		
		СтрокиУсловногоОформления = Объект.УсловноеОформление.НайтиСтроки(Новый Структура("ИмяЭлемента", Элемент.Имя));
		Если ЗначениеЗаполнено(Элемент.ПутьКДанным) тогда
			СтрокиУсловнойОбязательности = Объект.УсловнаяОбязательность.НайтиСтроки(Новый Структура("ПутьКДанным", Элемент.ПутьКДанным));	
		Иначе 
			СтрокиУсловнойОбязательности = Новый Массив;
		КонецЕсли;	
		
		Элемент.УсловноеПоведение = СтрокиУсловногоОформления.Количество() ИЛИ СтрокиУсловнойОбязательности.Количество();
		
		ПоказатьУсловноеОформлениеВСтруктуреФормы(Элемент, Объект)
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьРодителяТаблицу(ТекущаяСтрока)

	Если ТекущаяСтрока.ТипЭлемента = "Таблица" тогда
		Возврат ТекущаяСтрока;
	КонецЕсли;	
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Пока Родитель <> Неопределено цикл
		Если Родитель.ТипЭлемента = "Таблица" тогда
			Возврат Родитель;
		КонецЕсли;	
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	
	
&НаКлиенте
Процедура НачатьРедактированиеМодуля()
	
	ТекущееСвойство = Элементы.Свойства.ТекущиеДанные;
	
	МодульИмяСобытия = ТекущееСвойство.Значение; 
	МодульИмяЭлемента = Элементы.СтруктураФормы.ТекущиеДанные.Имя;
	Модуль = ТекущееСвойство.КодСобытия;
	
	Элементы.ГруппаМодуль.Видимость = Истина;
	Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаМодуль;
	
	Элементы.Модуль.РасширеннаяПодсказка.Заголовок = мдмКонструкторФормыКлиентСервер.ПодсказкаСобытия(МодульИмяСобытия);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакончитьРедактированиеМодуля(ИдентификаторТекущегоСвойства)
	
	МодульИмяСобытия  = ""; 
	МодульИмяЭлемента = "";
	Модуль            = "";
	
	Элементы.СвойстваФормы.ТекущаяСтраница = Элементы.ГруппаСвойстваЭлемента;
	Элементы.ГруппаМодуль.Видимость = Ложь;
	
	Элементы.Свойства.ТекущаяСтрока = ИдентификаторТекущегоСвойства;
	
КонецПроцедуры	

&НаКлиенте
Функция ТипЭлементаДанныхФормы(ТекущиеДанные)
	
	Если ТекущиеДанные.ЭтоТаблица тогда
		Возврат "Таблица";
	ИначеЕсли ТекущиеДанные.Тип.Типы()[0] = Тип("Булево") тогда
		Возврат "ПолеФлажка";
	Иначе
		Возврат "ПолеВвода";
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Функция ТипЭлементаРеквизитаФормы(ТекущиеДанные)
	
	Если ТекущиеДанные.ТипПредставление = "Булево" тогда
		Возврат "ПолеФлажка";
	Иначе
		Возврат "ПолеВвода";
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура СкопироватьРекурсивноИзСтруктурыФормы(Приемник, Источник)
	
	НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	
	Для Каждого СтрокаИсточник из Источник.ПолучитьЭлементы() цикл
		СкопироватьРекурсивноИзСтруктурыФормы(НоваяСтрока, СтрокаИсточник)	
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СкопироватьРекурсивноИзДанныхФормы(Приемник, Источник)
	
	Родитель = Источник.ПолучитьРодителя();
	Если Родитель = Неопределено тогда
		ПутьКДанным = Источник.Имя;
	Иначе 
		ПутьКДанным = Родитель.Имя + "." + Источник.Имя;
	КонецЕсли;	
	
	НоваяСтрока = мдмКонструкторФормыКлиентСервер.ДобавитьЭлементФормы(Приемник, Источник.Имя, Источник.Синоним, ТипЭлементаДанныхФормы(Источник), ПутьКДанным);
	
	Для Каждого СтрокаИсточник из Источник.ПолучитьЭлементы() цикл
		СкопироватьРекурсивноИзДанныхФормы(НоваяСтрока, СтрокаИсточник)	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборПодчиненныхОбъектов()
	
	ЭлементОтбора = РеквизитыФормы.КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
	ЭлементОтбора = КомандыФормы.КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры

#КонецОбласти